
var ReminderCountList = {
    _CountUrl: "/dataservice/ImportantDatesReminder.svc/getremindercount",
    _ListUrl: "/dataservice/ImportantDatesReminder.svc/getreminders",
    _DismissUrl: "/dataservice/ImportantDatesReminder.svc/dismiss",
    _ContactUrl: "../Contacts/ViewEditContact.aspx?contact_id=",
    _EmailUrl: "",
    _coachUrl: "",
    _spinner: '../App_Layout/spinner.gif',
    _defaultImg: '../App_Layout/noPhotoSilhouette.png',

    _displayTime: 6000, //milliseconds
    _fadeInOut: 500,
    _warningMsg: [],
    _errorMsg: new Array(),

    _UserHash: '', //string
    _rCount: 0, // reminder count: -1, or integer
    _num: -1000, // can't remove, AjaxList will use.
    _showMore: 0,
    _action: 0, //option: first-time launch afer login, click a#countlink, refresh page, click tab.
    _maxCount: 9, //if>10, then display +9. final is +99.

    _pageSize: 5,
    _lastReminderId: "00000000-0000-0000-0000-000000000000",
    _recordKeyId: "",

    // count
    $spanCount: $('span.reminder_count', 'div.div_reminder_count'),
    // all list stuff entry point
    $divPopup: $('div.reminder-list-popup'),
    // list->ul
    $ulList: $('ul.reminder-list'),
    // list->'show more' button
    $showMore: $('div.rl-popup-button-row'),

    //{DD1455FD-C8C6-4E90-8A52-8A32B4B7454B}
    getUserHash: function () {
        if ((typeof(gCurrentTP8iUserHash) != 'undefined') && gCurrentTP8iUserHash)
            this._UserHash = gCurrentTP8iUserHash;
        else {
            cookies = document.cookie.split(';');
            for (i = cookies.length - 1; i >= 0; i--) {
                if (/^\s*TPOnline/i.test(cookies[i])) {
                    this._UserHash = cookies[i].split('&')[0].split('=')[2];
                }
            }
        }
    },
    getTokenUrl: function () {
        if (typeof ImportantDateHelpReminders != 'undefined') {
            this._coachUrl = ImportantDateHelpReminders;
        }
        else {
            $.debug('Token URL is not set:' + ImportantDateHelpReminders);
        }
    },
    getCookieCount: function () {
        var rc = getCookie('reminderCount');
        // if user clear-up cookies, reach it again.
        if (rc == undefined) {
            this.getAjaxReminderCount(5);
        }
        // if cookie already exists, assign it.
        else {
            this._rCount = rc;
        }
    },
    /**http://stackoverflow.com/questions/1271162/get-refresh-event-from-page:
     * read a var current_page from cookie
     * if it's the same as your current page, you have a refresh
     * write current page to var current_page in cookie
     */
    getCookieRefresh: function () {
        var current_page = window.location.pathname;
        var rf = getCookie('reminderRefresh');
        if (rf != undefined && (rf == current_page)) {
            // a refresh
            this._action = 3;
            this.getAjaxReminderCount(3);
        }
            // new page load.
        else {
            setCookie('reminderRefresh', current_page, 1);
            this._action = 4;
            this.getAjaxReminderCount(4);
        }
    },
    //"<a href=\"/campus/top-producer/contacts/important-date-reminders/?utm_source=important-date-reminders&utm_medium=productlink&utm_campaign=tp-help\"  target=\"_blank\">Learn More</a>";
    getCoachText: function () {
        var coachText = "Never miss an important date again! Just add them to the contact record and we'll remind you here. " +
            '<a href="' + this._coachUrl+ '" target="_blank" class="coachClass">Learn More</a>';
        return '<li>' +
		'  <div class="rl-row rl-descr">' + coachText + '</div>' +
	    '</li>';
    },
    showCoachText: function (content) {
        this.$ulList.append(this.getCoachText());
        this.$divPopup.slideDown('slow', function () {
            $(this).delay(ReminderCountList._displayTime).slideUp(ReminderCountList._fadeInOut, function () {
                ReminderCountList.resetPopup();
            });
        });
    },	
    //If there are no Reminders but important dates exist for the logged in user, show the following coaching text.
    displayNoReminders: function() {
        var text = "You don't have any reminders today!";
        return  '<li>' +
		'  <div class="rl-row rl-descr">' + text + '</div>' +
	    '</li>';
    },

    resetPopup: function () {
        if ($('div.nub.nubTopLeft').is(':visible'))
            $('div.nub.nubTopLeft').hide();
        if (this.$showMore.is(':visible'))
            $showMore.hide();
        this.resetList();
    },
    resetList: function () {
        this.$ulList.empty();
    },
    resetShowMore: function () {
        this._num = -1000;
        this._recordKeyId = "";
        this._lastReminderId = "00000000-0000-0000-0000-000000000000";
        this._pageSize = 5;
        this._showMore = 0;
        //this.$showMore.hide(); // by default
    },

    // get session token from: https://tpodev13-8i.corp.homestore.net/dataservice/login.svc/?name=canglim30&password=toptop
    getAjaxReminderCount: function (flag) {
        var url = this._CountUrl;
        var userHash = this._UserHash;
        var currentDate = $.rcHelp.dateToYMD();
        var self = ReminderCountList;

        try {
            var jqxhr = $.ajax({
                type: "GET",
                url: url,
                beforeSend: function () {
                    self.$spanCount.html('');
                    $("<img/>").attr("src", self._spinner)
                        .css({'width':'16px', 'height':'16px', 'border': '0'})
                        .appendTo(self.$spanCount);
                },
                headers: { "token": userHash },
                data: {
                    "userHash": userHash,
                    "currentDate": currentDate
                },
                cache: false,
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            })
            .done(function (data) {
                $.debug('111:' + data.count + ', ' + self._rCount + ',' + flag);
                if (typeof (data.exception) !== 'undefined') {
                    msg = data.exception.exceptionType + ': ' + data.exception.message;
                    self.$spanCount.html(msg).show();
                    return false;
                }
                else if (flag == 5 || flag == 4) {
                    setCookie("reminderCount", data.count, 1);
                    self._rCount = data.count;
                }
                else {
                    count = data.count;
                    important_count = data.important_count;
                    setCookie("reminderCount", count, 1);
                    self._rCount = count;
                    if (count == 0) {
                        self.$spanCount.text('0').attr('data-value', 0);
                        $('a#ReminderCountLink').attr('title', 'No reminders for today');
                    }
                    else if (count > self._maxCount) {
                        self.$spanCount.text(self._maxCount + '+').attr('data-value', count);
                        $('a#ReminderCountLink').attr('title', count + ' reminders');
                    }
                    else {
                        self.$spanCount.text(count).attr('data-value', count);
                        if (count == 1) {
                            $('a#ReminderCountLink').attr('title', '1 reminder');
                        }
                        else {
                            $('a#ReminderCountLink').attr('title', count + ' reminders');
                        }
                    }
                    self.controlCount(flag);
                }
            })
            .fail(function (jqxhr, textStatus, errorThrown) {
                self._errorMsg.push(jqxhr.textStatus);
            })
            .always(function (data) {
                if (self.$spanCount.find('img').length)
                    self.$spanCount.find('img').remove();
                self._warningMsg.push(data.count);
            });
        }
        catch (e) { }
        return false;
    },

    getAjaxReminderList: function (flag, limitRecord) {
        var url = this._ListUrl;
        var userHash = this._UserHash;
        var currentDate = $.rcHelp.dateToYMD();
        var self = ReminderCountList;
        var limit = (typeof limitRecord !== 'undefined') ? limitRecord : self._pageSize;

        try {
            var jqxhr = $.ajax({
                type: "GET",
                url: url,
                beforeSend: function () {
                    $("<img/>").attr("src", self._spinner)
                        .css({ 'width': '16px', 'height': '16px', 'border': '0' })
                        .appendTo($('div.nub.nubTopLeft').next('h2'));
                },
                headers: { "token": userHash },
                data: {
                    "userHash": userHash,
                    "startDate": currentDate,
                    "pageSize": limit,
                    "lastReminderId": self._lastReminderId,
                    "recordKeyId": self._recordKeyId
                },
                cache: false,
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            })
            .done(function (data) {
                $.debug('222:'+self._rCount+','+self._num+','+flag);
                if (data.exception && typeof (data.exception) == 'object') {
                    var msg = data.exception.exceptionType + ': ' + data.exception.message;
                    if ($('div.nub.nubTopLeft').next('h2').find('img').length) {
                        $('div.nub.nubTopLeft').next('h2').find('img').remove();
                    }
                    self.$divPopup.html(msg).show();
                    return false;
                }
                else if (data.count == 0) {
                    self.showCoachText();
                }
                else {
                    if (data.reminders.length === 0) {
                        $showMore.hide();
                        $.debug('data.reminders is 0');
                        return;
                    }
                    var items = [];
                    $.each(data.reminders, function (key, val) {
                        items.push(self.assembleListLi(val));
                    });
                    self.$ulList.append(items.join(''));

                    // click 'a#ReminderCountLink'
                    if (flag == 2) {
                        self._num = parseInt(data.count) - self._pageSize;
                        //self.controlList(2);
                    }
                        // first list screen.
                        // can't use ._rCount=-1, coz it already changed in ajaxCount().
                    else if (self._num == -1000) {
                        //self.controlList(1);
                        self._num = parseInt(data.count) - self._pageSize;
                    }
                    else {
                        if(flag != 4 && flag != 5) {
                            self._num -= self._pageSize;
                        }
                        else if (flag == 4) {
                            self._num--; // or -limitRecord
                            $.debug($('li:last', self.$ulList).html());
                            $('ul.reminder-list > li:last:visible').find('div.rl-row.rl-item-expanded').css({ 'display': 'block' });
                        }
                        /*
                        if (self._num <= 0) {
                            self.$showMore.hide();
                        }
                        */
                    }

                    if (self._num > 0) {
                        self._showMore = 1;
                        self.$showMore.show();
                        var dr = data.reminders;
                        self._recordKeyId = dr[dr.length - 1].keyrecid;
                        self._lastReminderId = dr[dr.length - 1].reminder_id;
                    }
                    else {
                        self._showMore = 0;
                        self.$showMore.hide();
                        self._recordKeyId = "";
                        self._lastReminderId = "00000000-0000-0000-0000-000000000000";
                    }
                    self.controlList(flag);
                }
            })
            .fail(function (jqxhr, textStatus, errorThrown) { })
            .always(function (data) {
                if ($('div.nub.nubTopLeft').next('h2').find('img').length) {
                    $('div.nub.nubTopLeft').next('h2').find('img').remove();
                }
            });
        }
        catch (e) { }
        return false;
    },

    setAjaxDismissReminders: function (reminderIds) {
        var url = this._DismissUrl;
        var userHash = this._UserHash;
        var reminderIds = reminderIds;
        var self = ReminderCountList;
        var $pos = this.$spanCount;
        try {
            var jqxhr = $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify( [$.extractID(reminderIds)] ),
                contentType: "application/json; charset=utf-8",
                headers: { "token": userHash },
                beforeSend: function () {
                    $("<img/>").attr("src", self._spinner)
                        .css({ 'width': '16px', 'height': '16px', 'border': '0' })
                        .appendTo($('a#'+reminderIds));
                },
                dataType: "json"
            })
            .done(function (data) {
                $.debug($pos.attr('data-value'));
                var num = parseInt($pos.attr('data-value')) - 1;
                if (num == 0) {
                    self.$spanCount.text('0').attr('data-value', 0);
                    $('a#ReminderCountLink').attr('title', "No reminders for today");
                    self.resetPopup();
                }
                else if (num > self._maxCount) {
                    self.$spanCount.text(self._maxCount + '+').attr('data-value', num);
                    $('a#ReminderCountLink').attr('title', num + ' reminders');
                }
                else {
                    self.$spanCount.text(num).attr('data-value', num);
                    if (num == 1) {
                        $('a#ReminderCountLink').attr('title', '1 reminder');
                    }
                    else {
                        $('a#ReminderCountLink').attr('title', num + ' reminders');
                    }
                }
                setCookie("reminderCount", num, 1);

                $('a.rl-button.rl-button-secondary[id=' + reminderIds + ']')
                    .closest('li')
                    .fadeOut(self._fadeInOut)
                    .hide();

                var $next = $('a.rl-button.rl-button-secondary[id=' + reminderIds + ']')
                    .closest('li')
                    .next('li:visible');
                if ($next.length) {
                    $next.find('div.rl-row.rl-item-expanded').show();                        
                    $next.slideDown('slow');
                    if (self._showMore) {
                        self.getAjaxReminderList(5, 1);
                    }
                }
                else {
                    // promise:
                    if (self._showMore) {
                        self.getAjaxReminderList(4, 1);
                    }
                    else {
                        var $prev = $('a.rl-button.rl-button-secondary[id=' + reminderIds + ']')
                            .closest('li')
                            .prev('li:visible');
                        if ($prev.length) {
                            $prev.find('div.rl-row.rl-item-expanded').show();
                            $prev.slideDown('slow');
                        }
                        else {
                            self.$spanCount.text('0').attr('data-value', 0);
                            $('a#ReminderCountLink').attr('title', "No reminders for today");
                            self.$divPopup.hide();
                        }
                    }
                }

            })
            .fail(function (jqxhr, textStatus, errorThrown) { })
            .always(function (data) { });
        }
        catch (e) { }
        return false;
    },

    // plus_minus could be: 1/-1
    updateAjaxReminderCount: function (plus_minus) {
        try {
            var $pos = this.$spanCount;
            var cnt = parseInt($pos.attr('data-value')) + plus_minus;
            if (cnt > this._maxCount) {
                $pos.attr('data-value', cnt).text(this._maxCount + '+');
                $('a#ReminderCountLink').attr('title', cnt + ' reminders');
            }
            else if (cnt == 0) {
                $pos.attr('data-value', 0).text('0');
                $('a#ReminderCountLink').attr('title', "No reminders for today");
            }
            else {
                $pos.attr('data-value', cnt).text(cnt).attr('data-value', cnt);
                if (cnt == 1) {
                    $('a#ReminderCountLink').attr('title', '1 reminder');
                }
                else {
                    $('a#ReminderCountLink').attr('title', cnt + ' reminders');
                }
            }
        }
        catch (e) {
            $.debug(JSON.toString(e.message) + ', ' + plus_minus);
        }
    },

    assembleListLi: function (val)
    {
        var rid = val.reminder_id;
        var idate = val.important_date.replace(/\s+.*$/, '');
        var df = $.rcHelp.show_date_diff(idate);
        var txt = this.displaySubMenu(idate, val);
        var li = '<li>' +
            '  <div class="rl-row rl-contact-name">' +
            '    <a target="_blank" href="' +
                  this._ContactUrl +
                  val.linked_entity_id + '&amp;activeView=0" id="n_' +
                  rid + '" class="rl-name">' +
                  val.name.replace(/</g, '&lt;') + '</a>' +
            '  </div>' +
            
            '  <div class="rl-row rl-descr">' + val.description.replace(/</g, '&lt;') +
            '    <span class="rl-dayCount">' + df + '</span>' +
            '  </div>' +
            txt +
            '</li>';

        return li;
    },

    //new Date(idate).toDateString().replace(/^\w{3}\s/, ''): Mon Apr 29 2013=>Apr 29 2013
    displaySubMenu: function (idate, val) {
        var cid = val.linked_entity_id;
        var rid = val.reminder_id;
        var rdesc = val.description.replace(/</g, '&lt;');
        var wrapUpOnClick = 'onclick="' + 'WrapUpInfo.GetInfoFromList(\'' + cid + '\', \'' + rid + '\', \'' + rdesc + '\');' + 'WrapUp.Create(\'WRAP-UP\');' + '"';
        var phone = val.phone || '(1)604-688-9999';
        var email = val.email || 'top-producer@move.com';
        var photo = val.photo || ReminderCountList._defaultImg;
        var eid = "e_" + rid;
        var txt =
        '  <div class="rl-row rl-item-expanded" style="display:none;">' +
        '    <span class="rl-date"> ' + $.rcHelp.dateToFullYMD(idate) + ' </span>' +
        '    <div class="rl-contact-details">' +
        '        <a target="_blank" href="' +
                  this._ContactUrl +
                  val.linked_entity_id + '&amp;activeView=0" class="rl-contactImage">' +
        '          <img style="width:50px;" src="' + photo + '" title="" />' +
        '        </a>' +
        '        <ul class="rl-contact-info">' +
        '          <li>' + phone + '</li>' +
        '          <li> <a id="' + eid + '" href="javascript:onComposeEmail($get(\'' + eid + '\'));" ' +
        '             onclick="onComposeEmail(this);return false;" target="_blank">' + email + '</a> </li>' +
        '        </ul>' +
        '    </div>' +
        '    <div class="rl-button-row"> ' +
        '      <a href="#" id="d_' + rid + '" class="rl-button rl-button-secondary">Dismiss</a> ' +
        '      <a href="#" id="w_' + rid + '" class="rl-button rl-button-primary" ' + wrapUpOnClick + '>Wrap Up</a>' +
        '    </div>' +
        '  </div>';
        return txt;
    },

    showCount: function (num) {

        var count = num || getCookie('reminderCount');
        $pos = this.$spanCount;
        $alk = $('a#ReminderCountLink');

        if (count == 0) {
            $pos.text('0').attr('data-value', 0);
            $alk.attr('title', 'No reminders for today');
            this.resetPopup();
        }
        else if (count > self._maxCount) {
            $pos.text(self._maxCount + '+').attr('data-value', count);
            $alk.attr('title', count + ' reminders');
        }
        else {
            $pos.text(count).attr('data-value', count);
            if (count == 1) {
                $alk.attr('title', '1 reminder');
            }
            else {
                $alk.attr('title', count + ' reminders');
            }
        }
    },

    controlCount: function (flag) {
        $scount = this.$spanCount;
        if (flag == 1) {
            $scount.fadeIn(this._fadeInOut);
        }
        else if (flag == 2) {
            $scount.fadeIn(this._fadeInOut);
        }
        else if (flag == 3) {
            $scount.fadeIn(this._fadeInOut);
        }
        else if (flag == 4) {
            //$scount.hide().delay(this._displayTime).fadeIn(this._fadeInOut);
            $scount.hide().fadeIn(this._fadeInOut);
        }
        else if (flag == 5) {
            $scount.show();
        }
        else {
            $.debug("What's the problem ??? ");
        }
    },

    controlList: function (flag) {
        $.debug('###############:' + flag);
        $dpopup = this.$divPopup;
        if (flag == 1) {
            if (!$('div.rl-row.rl-item-expanded:first').is(':visible')) {
                $('div.rl-row.rl-item-expanded:first').show();
            }
            $dpopup.slideDown('slow', function () {
                $.debug('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~');

                $(this).find('ul.reminder-list>li:first').addClass('rl-row-expanded');
                $(this).delay(ReminderCountList._displayTime).slideUp(ReminderCountList._fadeInOut, function () {
                    ReminderCountList.resetPopup();
                });
            });
        }
        // re-click 'a#ReminderCountLink', behaviour should like flag=1
        else if (flag == 2) {
            //if (!$('div.nub.nubTopLeft').is(':visible')) $('div.nub.nubTopLeft').show();
            if (!$('div.rl-row.rl-item-expanded:first').is(':visible')) {
                $('div.rl-row.rl-item-expanded:first').show();
            }
            $dpopup.slideDown('slow', function () {
                $.debug('***************************************');
                $(this).find('ul.reminder-list>li:first').addClass('rl-row-expanded');
            });
        }
        else if (flag == 3) {
            $dpopup.show();
        }
        else if (flag == 4) {
            $dpopup.slideDown('slow');
        }
        else if (flag == 5) {
            $dpopup.slideDown('slow');
        }
        else if (flag == 6) {
            $dpopup.slideDown('slow');
        }
        else {}
    }
}

jQuery.rcHelp = {
    _month: [
	"January","February", "March", "April", "May", "June",
	"July", "August", "September", "October", "November", "December"
    ],
    _oneDay: one_day = 1000 * 60 * 60 * 24,

    //toISOString:2013-04-17T21:18:01.999Z, 2013-04-19T22:32:16.496Z
    //LOG: toLocaleString:Wednesday, April 17, 2013 2:26:25 PM 
    //<=IE8: toLocaleString(), >IE8: toISOString()
    getDateServerFormat: function (oDate) {
        var sFormatDate = "";
        if ($.browser.msie && parseInt($.browser.version, 10) <= 8) {
            sFormatDate = oDate.toLocaleString();
        } else {
            sFormatDate = oDate.toISOString();
        }
        return sFormatDate;
    },

    // input: yyyy-mm-dd or '2013-04-30 00:00:00Z'?
    get_date_diff_IE_NOT_work: function (important_date) {
        if (/\s+/.test(important_date))
            important_date = important_date.replace(/\s+.*$/, '');
        idate = Date.parse(important_date);
        today = new Date();
        return Math.ceil((idate - today.getTime()) / this._oneDay);
    },
    //input: yyyy-mm-dd hh:mm
    get_datetime_diff: function (important_datetime) {
        var pattern = /(\d{4})-(\d{2})-(\d{2})\s+(\d{2}):(\d{2})/;
        var dt = pattern.exec(important_datetime);
        dt[4] = dt[4] ? dt[4] : 0;
        dt[5] = dt[5] ? dt[5] : 0;
        idate = new Date(dt[1], dt[2]-1, dt[3], dt[4], dt[5]);
        today = new Date();
        
        return Math.ceil((idate.getTime() - today.getTime()) / this._oneDay);
    },

    // '2013-05-01' or '2013-04-30 00:00:00Z'
    get_date_diff: function (important_date) {
        if (/\s+/.test(important_date))
            important_date = important_date.replace(/\s+.*$/, '');

        d1 = important_date.split('-');
        d2 = new Date(d1[0], d1[1]-1, d1[2]);

        today = new Date();

        return Math.ceil((d2.getTime() - today.getTime()) / this._oneDay);
    },

    show_date_diff: function (important_date) {
        // same interface with Jacqueline's codes:
        var day = this.get_date_diff(important_date);
        //var day = getDayDiff(important_date);
        var df;
        if (day == 0) {
            df = ' today';
        }
        else if (day == -1) {
            df = ' yesterday';
        }
        else if (day < -1) {
            df = ' ' + Math.abs(day) + ' days ago';
        }
        else if (day == 1) {
            df = ' in 1 day';
        }
        else if (day > 1) {
            df = ' in ' + Math.abs(day) + ' days';
        }
        else {
            df = ' in ' + Math.abs(day) + ' days...';
        }
        return df;
    },

    dateToYMD: function (date) {
        if (date == undefined) date = new Date();
        var d = date.getDate();
        var m = date.getMonth() + 1;
        var y = date.getFullYear();
        return '' + y + '-' + (m <= 9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);
    },

    dateToFullYMD: function (important_date) {
        idate = important_date.split('-');
        date = new Date(idate[0], idate[1], idate[2]);
        var d = date.getDate();
        var m = date.getMonth();
        var y = date.getFullYear();
        return this._month[m-1] + ' ' + d + ', ' + y;
    }

};

String.prototype.trim = String.prototype.trim || function trim() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
};
jQuery.extractID = function (idStr) {
    return idStr.substr(2);
    //return idStr.replace(/\D+/g, '');
};
jQuery.fn.trim = function () {
    return this.replace(/^\s*/, '').replace(/\s*$/, '');
};
jQuery.debug = function (log) {
    if (typeof (window.console) != 'undefined' || window.console !== undefined) {
        console.log(log);
    }
};

$(function () {
    ///////////////// register all events //////////////////

    // register 'click' event.
    $('a#ReminderCountLink').bind('click', function ()
    {
        ReminderCountList.resetShowMore();
        $ul = $('ul.reminder-list');
        $.debug('ul length:' + $ul.html().trim().length); //':[' + $ul.html() + ']'); //0
        if ($ul.html().trim().length > 0) {
            $list = $('div.reminder-list-popup');
            if ($list.length > 0 && $list.is(':visible')) {
                $.debug('++++++++++++++++++++++++++++++++++++');              
                $list.slideUp(ReminderCountList._fadeInOut, function () {
                    ReminderCountList.resetPopup();
                });

            }
        }
        else {
            ReminderCountList.getAjaxReminderCount(2);
            ReminderCountList.getAjaxReminderList(2);
        }
        return false;
    });

    // register 'Show More' event.
    $('a.rl-button', 'div.rl-popup-button-row').bind('click', function (e) {
        e.stopPropagation();
        ReminderCountList.getAjaxReminderList(6);        
        $('div.reminder-list-popup').show().slideDown(ReminderCountList._fadeInOut, function () {
            
        });
        return false;
    });

    // register 'mouseover' for popup list.
    $('div.reminder-list-popup').one('mouseover', function (e) {
        //e.stopPropagation();
        $(this).stop(true, true).show(ReminderCountList._fadeInOut);
        //$(this).unbind('mouseover');
        return false;
    });


    /**
      .live('hover',
        function () { $(this).css('cursor', 'auto'); },
        function () { $(this).css('cursor', 'pointer'); })
     */
    $('ul.reminder-list > li')
    .live('click', function (e) {
        $.debug('333:' + e.target.nodeName);
        $.debug($(this)); $.debug($(e.target).closest('li'));
        $('li', 'ul.reminder-list').removeClass('rl-row-expanded');
        $(this).addClass('rl-row-expanded');

        /*
        if ($(this).hasClass('rl-row-expanded'))
            $(this).removeClass('rl-row-expanded');
        else
            $(this).addClass('rl-row-expanded');
        */

        if ($(this).find('div.rl-row.rl-item-expanded').is(':visible')) {
            return false;
        }

        //if ($(this) !== $(e.target).closest('li')) {}
        $('div.rl-row.rl-item-expanded').slideUp(ReminderCountList._fadeInOut);
        $(this).find('div.rl-row.rl-item-expanded').slideDown(ReminderCountList._fadeInOut);
        
        return false;
    });
    $('a.coachClass').live('click', function (e) {
        e.stopPropagation();
        window.open($(this).attr('href'));
        return false;
    });

    /**
     * register 'click' screen to close popup list.
     * The .not() method will end up providing you with more readable selections than pushing complex selectors 
     * or variables into a :not() selector filter. In most cases, it is a better choice.
     * .not("a#ReminderCountLink")
     */
    $("*", document.body).live("click", function (e) {
        //$.debug('444:' + e.target.nodeName);
        var $popup = ReminderCountList.$divPopup;
        if (!$popup.is(':visible'))
            return true;
        /**
        if ($popup.find($(this)).length) {
            return true; // if children, ignore.
        }
        */
        //Clicking <Cancel> or <Save> from Wrap Up dialog should not close the Reminder list.
        //http://stackoverflow.com/questions/714471/jquery-hide-element-when-clicked-anywhere-on-the-page
        if ($(e.target).is('div.reminder-list-popup *, #TPWrapUpOverlay *')) {
            return true;
        }
        e.stopPropagation();
        if (!$(e.target).is('div.reminder-list-popup')) {
            $('div.reminder-list-popup').slideUp(ReminderCountList._fadeInOut, function () {
                ReminderCountList.resetPopup();
            });
        }
        return true;
    });

    // register 'Dismiss' event.
    $('a.rl-button.rl-button-secondary', 'div.rl-button-row').live('click', function (e) {
        e.stopPropagation();
        ReminderCountList.setAjaxDismissReminders($(this).attr('id'));
        return false;
    });

    // contact-name click:
    // 1. expand .
    // 2. 
    $('a.rl-name', 'div.rl-row.rl-contact-name').live('click', function (e) {
        e.stopPropagation();

        var $t = $(this).closest('li').find('div.rl-row.rl-item-expanded');
        $.debug($t.length);
        if ($t.is(':visible')) {
            var href = $(e.target).attr('href');
            if (href) {
                window.open(href);
                e.preventDefault();
            }
        }
        else {
            $(e.target).closest('li').trigger('click');
        }

        return false;
    });

    //image click
    $('a.rl-contactImage').live('click', function (e) {
        e.stopPropagation();
        $(e.target).closest('li').find('a.rl-name').trigger('click');

        return false;
    });

    ///////////////// MAIN ENTRY to process //////////////////

    // first of first, get UserHash:
    ReminderCountList.getUserHash();

    // second, get cookie['reminderCount']:
    ReminderCountList.getCookieCount();

    ReminderCountList.getTokenUrl();

    if (ReminderCountList._rCount == -1) {
        ReminderCountList.getAjaxReminderCount(1);
        ReminderCountList.getAjaxReminderList(1);
        setCookie('reminderRefresh', window.location.pathname, 1);
    }
    else {
        $pos = ReminderCountList.$spanCount;
        var rc = getCookie('reminderCount');
        if (rc) {
            $pos.text(rc).text(rc).fadeIn(100);
            if (ReminderCountList.$divPopup.is(':visible'))
                ReminderCountList.$divPopup.hide();
        }
        else {
            ReminderCountList.getAjaxReminderCount(3); 
        }
        /*
        current_page = window.location.pathname;
        var rf = getCookie('reminderRefresh');
        if (rf && (rf == current_page)) {
            ReminderCountList.getAjaxReminderCount(3); //refresh
        }
        else {
            setCookie('reminderRefresh', current_page, 1);
            ReminderCountList.getAjaxReminderCount(4);
        }
        */
    }

});

if (typeof (Sys) !== 'undefined') { Sys.Application.notifyScriptLoaded(); }