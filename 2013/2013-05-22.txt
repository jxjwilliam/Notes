/**
 * extract all global constants out of codes, for easier management.
 * 2 token global variables: gCurrentTP8iUserHash, ImportantDateHelpReminders
 * 2 cookies: reminderCount, reminderRefresh
 * flag: 1-first-time launch, 2-<a> click, 3-, 4-show-more, 5-show-more, 6-show-more click.
 */
var rclSettings = {
    displayTime: 5000, //milliseconds
    fadeInOut: 500,
    maxCount: 99,
    pageSize: 5,
    num: -1000, // can't remove, ReminderList will use.
    lastReminderId: "00000000-0000-0000-0000-000000000000",
    recordKeyId: "",
    spinner: '../App_Layout/spinner.gif',
    spinnerClass: { "width": "10px", "height": "10px", "border": "0" },
    defaultImg: '../App_Layout/noPhotoSilhouette.png',
    cookieExpire: 1,   //1 day
    CountUrl: "/dataservice/ImportantDatesReminder.svc/getremindercount",
    ListUrl: "/dataservice/ImportantDatesReminder.svc/getreminders",
    DismissUrl: "/dataservice/ImportantDatesReminder.svc/dismiss",
    ContactUrl: "../Contacts/ViewEditContact.aspx?contact_id="
};

var ReminderCountList = {
    _debug:      /(wjiang01vd|localhost)/i.test(document.location.hostname),
    _CountUrl:   rclSettings.CountUrl,
    _ListUrl:    rclSettings.ListUrl,
    _DismissUrl: rclSettings.DismissUrl,
    _ContactUrl: rclSettings.ContactUrl,
    _spinner:    rclSettings.spinner,
    _defaultImg: rclSettings.defaultImg,

    _displayTime: rclSettings.displayTime,
    _fadeInOut:   rclSettings.fadeInOut,
    _warningMsg:  [],
    _errorMsg: new Array(),
    _mouseFlag: false,
    _clickFlag: false,

    _rCount: 0, // reminder count: -1, or integer
    _num: rclSettings.num,
    _showMore: 0,

    _maxCount: rclSettings.maxCount, //if>10, then display +9. final is +99.
    _pageSize: rclSettings.pageSize,
    _lastReminderId: rclSettings.lastReminderId,
    _recordKeyId: rclSettings.recordKeyId,
    _onList: [
        //'a#ReminderCountLink', 
        'div.reminder-list-popup', 
        'div.reminder-list-popup *', 
        '#TPWrapUpOverlay, #TPWrapUpOverlay *'
    ],

    // count
    $spanCount: $('span.reminder_count', 'div.div_reminder_count'),
    // all list stuff entry point
    $divPopup: $('div#reminder_list_popup'), //div.reminder-list-popup
    // list->ul
    $ulList: $('ul.reminder-list'),
    // list->'show more' button
    $showMore: $('div.rl-popup-button-row'),

    //{DD1455FD-C8C6-4E90-8A52-8A32B4B7454B}
    getTokenUrl: function () {
        if (typeof ImportantDateHelpReminders != 'undefined') {
            this._coachUrl = ImportantDateHelpReminders;
        }
        else {
            $.rclHelp.debug('Token URL is not set:' + ImportantDateHelpReminders);
        }
    },
    getCookieCount: function () {
        var rc = getCookie('reminderCount');
        // if user clear-up cookies, reach it again.
        if (rc) {
            this._rCount = rc;
        }
        // if cookie already exists, assign it.
        else {
            this.getAjaxReminderList(3);
        }
    },
    /**
     * 1. http://stackoverflow.com/questions/1271162/get-refresh-event-from-page
     * read a var current_page from cookie
     * if it's the same as your current page, you have a refresh
     * write current page to var current_page in cookie
     * 2. decodeURI(window.location)=window.location.href
     */
    getCookieRefresh: function () {
        var current_page = window.location.pathname;
        var rf = getCookie('reminderRefresh');
        if (rf != undefined && (rf == current_page)) {
            ; // refresh of current page, just show cookie['reminderCount'].
        }
        // new page load.
        else {
            setCookie('reminderRefresh', current_page, rclSettings.cookieExpire);
        }
        this.showCount();
    },

    getCoachText: function () {
        var coachText = "Never miss an important date again! Just add them to the contact record and we'll remind you here. " +
            '<a href="' + this._coachUrl + '" target="_blank" class="coachClass">Learn More</a>';
        return '<li>' +
		'  <div class="rl-row rl-descr">' + coachText + '</div>' +
	    '</li>';
    },
    //If there are no Reminders but important dates exist for the logged in user, show the following coaching text.
    getNoReminders: function () {
        var text = "You don't have any reminders today!";
        return '<li>' +
		'  <div class="rl-row rl-descr">' + text + '</div>' +
	    '</li>';
    },
    showReminderText: function (txt) {
        this.$ulList.append(txt);
        this.$divPopup
//            .stop(true, true)
//            .show()
            .slideDown(ReminderCountList._fadeInOut);
    },

    resetPopup: function () {
        if (this.$divPopup.is(':visible')) {
            this.$divPopup.hide();
        }
        this.resetList();
    },
    resetList: function () {
        this.$ulList.empty();
    },
    resetShowMore: function () {
        if (this.$showMore.is(':visible')) {
            this.$showMore.hide();
        }
        this._num = rclSettings.num;
        this._recordKeyId = rclSettings.recordKeyId;
        this._lastReminderId = rclSettings.lastReminderId;
        this._pageSize = rclSettings.pageSize;
        this._showMore = 0;
    },
    hideTitleDiv: function() {
        if ($("div.rl-list-header").is(':visible')) {
            $("div.rl-list-header").hide();
        }
        return false;
    },

    ////// Events defination //////

    // 1. a#ReminderCountLink click:
    countLinkHandler: function () {

        ReminderCountList.resetShowMore();
        $list = $('ul.reminder-list');
        $.rclHelp.debug('<countLinkHandler>, ul length=' + $list.html().trim().length);

        if ($list.html().trim().length > 0) {
            $popup = ReminderCountList.$divPopup;
            if ($popup.is(':visible')) {
                $popup.slideUp(ReminderCountList._fadeInOut, function () {
                    ReminderCountList.resetPopup();
                });
            }
        }
        else {
            ReminderCountList.getAjaxReminderList(2);
            $(document).on('click', 'body', ReminderCountList.hideonShowReminderListPopup);
        }
        //$('a#ReminderCountLink').unbind('click', ReminderCountList.countLinkHandler);
        return false;
    },

    // 2. div#reminder_list_popup.reminder-list-popup: mouseenter mouseleave:
    mouseHandler: function (e) {
        e.preventDefault();
        e.stopPropagation();
        $.rclHelp.debug('<mouseHandler>, e.type=' + e.type);
        if (ReminderCountList.$divPopup.is(':visible')) {
            //ReminderCountList._displayTime = $.rclHelp._oneDay; // 1 day
            ReminderCountList._mouseFlag = true;
            $('div#reminder_list_popup').stop(true, true);
        }
        else {
            $.rclHelp.debug('<mouseHandler>, divPopup is *NOT* visible');
        }
        return false;
    },

    // 3. show more: click
    showMoreHandler: function (e) {
        $.rclHelp.debug('<showMoreHandler>: e.type=' + e.type);
        e.stopPropagation();
        ReminderCountList.getAjaxReminderList(6);
        return false;
    },

    // DismissHandler:
    dismissHandler: function (e) {
        $.rclHelp.debug('<dismissHandler>: e.type=' + e.type);
        e.stopPropagation();
        ReminderCountList.setAjaxDismissReminders($(this).attr('id'));
        return false;
    },

    // ul.reminder-list expand and collapse:
    ulListHandler: function (e) {
        $('li', 'ul.reminder-list').removeClass('rl-row-expanded');
        $(this).addClass('rl-row-expanded');

        if ($(this).find('div.rl-row.rl-item-expanded').is(':visible')) {
            e.stopPropagation();
            return false;
        }

        //if ($(this) !== $(e.target).closest('li')) {}
        $('div.rl-row.rl-item-expanded').slideUp(ReminderCountList._fadeInOut);
        $(this).find('div.rl-row.rl-item-expanded').slideDown(ReminderCountList._fadeInOut);

        return false;
    },

    // click anywhere.
    // in any case, slideUp() only run 1 time, thus set 'ReminderCountList._clickFlag'.
    hideonShowReminderListPopup: function (evt) {
        if (typeof (evt) == "undefined") {
            evt = window.event;
        }
        if (typeof (evt) == "undefined") {
            return false;
        }
        var srcEle = evt.srcElement;
        if (!srcEle) {
            srcEle = evt.target;
        }
        if ($(srcEle).is(ReminderCountList._onList.join(','))) {
            return true;
        }
        var overlay = $get('reminder_list_popup');
        //$.rclHelp.debug(overlay);
        if ($.isMouseOut(overlay, evt) || srcEle && srcEle.tagName.toUpperCase() == 'A' || srcEle && srcEle.tagName.toUpperCase() == 'IMG') {
            $.rclHelp.debug('<hideonShowReminderListPopup>: 1, ' + srcEle.tagName + ', _clickFlag=' + ReminderCountList._clickFlag);
            if ($('div#reminder_list_popup').is(':visible')) {
                if (ReminderCountList._clickFlag) {
                    // ReminderCountList._clickFlag = false;
                    return;
                }
                else {
                    ReminderCountList._clickFlag = true;
                }
                $('div#reminder_list_popup')
                    .stop(true, true)
                    .slideUp(ReminderCountList._fadeInOut, function () {
                        $.rclHelp.debug('<hideonShowReminderListPopup>: 2, slideUp');
                        ReminderCountList.resetList();
                        //ReminderCountList.resetPopup(); //hide(overlay);
                        ReminderCountList._clickFlag = false;
                    });
            }
            $.rclHelp.debug('<hideonShowReminderListPopup>: 3');
            $(document).off('click', 'body', ReminderCountList.hideonShowReminderListPopup);
        }
        else {
            $.rclHelp.debug('<hideonShowReminderListPopup>: 4');
        }
    },

    // contact-name click
    contactHandler: function (e) {
        $.rclHelp.debug('<contactHandler>: e.type=' + e.type);
        e.stopPropagation();

        var $t = $(this).closest('li').find('div.rl-row.rl-item-expanded');
        $.rclHelp.debug('<contactHandler>: (div.rl-row.rl-item-expanded).length=' + $t.length);
        if ($t.is(':visible')) {
            var href = $(e.target).attr('href');
            if (href) {
                window.open(href);
                e.preventDefault();
            }
        }
        else {
            $(e.target).closest('li').trigger('click');
        }
        return false;
    },

    // Now the main Ajax Calling:
    getAjaxReminderList: function (flag, limitRecord) {
        var self = this;
        var url = this._ListUrl;
        var startDate = $.rclHelp.dateToYMD();
        var limit = limitRecord != undefined ? limitRecord : this._pageSize;

        var cbCountBeforeSend = function () {
            self.$spanCount.html('');
            $("<img/>").attr("src", self._spinner)
				.css(rclSettings.spinnerClass)
				.appendTo(self.$spanCount);
            $('a#ReminderCountLink')
                .addClass('disabled')
                .removeAttr("href")
                .off('click', self.countLinkHandler);
        };

        var cbCountSuccess = function (data) {
            // compatible with previous non-json data:
            var count = data.count != undefined ? data.count : data;

            $.rclHelp.debug('<cbCountSuccess>: count='+count+', _rCount='+self._rCount+', flag='+flag);
            if (typeof (data.exception) !== 'undefined') {
                msg = data.exception.exceptionType + ': ' + data.exception.message;
                self.$spanCount.html(msg).show();
                return false;
            }
            else {
                setCookie("reminderCount", count, rclSettings.cookieExpire);
                self._rCount = count;
                self.showCount(count);
            }

            cbCountComplete();
        };

        var cbCountComplete = function () {
            if (self.$spanCount.find('img').length)
                self.$spanCount.find('img').remove();
            $.rclHelp.debug('<cbCountComplete>: remove img and enable <a> click');
            $('a#ReminderCountLink')
                .removeClass("disabled")
                .attr("href", "javascript:void(0);")
                .bind('click', self.countLinkHandler);
        };

        var cbListBeforeSend = function () {
            if (flag==4 || flag==5) return;
            if (flag != 6) { //show more.
                cbCountBeforeSend();
            }
            $("<img/>").attr("src", self._spinner)
				.css(rclSettings.spinnerClass)
				.appendTo($('div.nub.nubTopLeft').next('h2'));
            if (!$('div.rl-list-header').is(':visible'))
                $('div.rl-list-header').show();
        };

        var cbListSuccess = function (data) {

            if (limit != 1 && flag != 6) {
                cbCountSuccess(data);
                if (flag == 3) return;
            }

            var count = data.count == undefined ? data : data.count;
            var important_count = data.important_count == undefined ? 0 : data.important_count;

            $.rclHelp.debug('<cbListSuccess>: _rCount='+self._rCount+', _num='+self._num+', flag='+flag+', count='+count+', important_count='+important_count);
            if (data.exception && typeof (data.exception) == 'object') {
                var msg = data.exception.exceptionType + ': ' + data.exception.message;
                self.$divPopup.html(msg).show();
                return false;
            }
            else if (count == 0) {
                if (flag != 1) {
                    cbListComplete();
                    if (important_count && important_count > 0) {
                        self.showReminderText(self.getNoReminders());
                    }
                    else {
                        self.showReminderText(self.getCoachText());
                    }
                }
                else {
                    ; //flag=1,count=0, first-time when login, it displays nothing.
                }
            }
            else {
                if (data.reminders.length === 0) {
                    self.$showMore.hide();
                    $.rclHelp.debug('<cbListSuccess>, data.reminders is 0');
                    return;
                }
                var items = [];
                $.each(data.reminders, function (key, val) {
                    items.push(self.assembleListLi(val));
                });
                self.$ulList.append(items.join(''));

                // click 'a#ReminderCountLink'
                if (flag == 2) {
                    self._num = parseInt(count) - self._pageSize;
                }
                    // first list screen.
                    // can't use ._rCount=-1, coz it already changed in ajaxCount().
                else if (self._num == rclSettings.num) {
                    self._num = parseInt(count) - self._pageSize;
                }
                else {
                    if (flag != 4 && flag != 5) {
                        self._num -= self._pageSize;
                    }
                    else if (flag == 4) {
                        self._num--; // or -limitRecord
                        $.rclHelp.debug($('li:last', self.$ulList).html());
                        $('ul.reminder-list > li:last:visible')
                            .find('div.rl-row.rl-item-expanded')
                            .css({ 'display': 'block' });
                    }
                }

                if (self._num > 0) {
                    self._showMore = 1;
                    self.$showMore.show();
                    var dr = data.reminders;
                    self._recordKeyId = dr[dr.length-1].keyrecid;
                    self._lastReminderId = dr[dr.length-1].reminder_id;
                }
                else {
                    self.resetShowMore();
                }

                self.showList(flag);

                cbListComplete();
            }
        };

        var cbListComplete = function () {
            var $fs = $('div.nub.nubTopLeft').next('h2').find('img');
            if ($fs.length) $fs.remove();
            return false;
        };

        ////////////////////////////////

        var data = {
            startDate: startDate,
            pageSize: limit,
            lastReminderId: self._lastReminderId,
            recordKeyId: self._recordKeyId
        };

        url += '?' + $.param(data);
        dataServiceGate({
            httpMethod: "GET",
            beforeSend: cbListBeforeSend,
            url: url,
            onSuccess: cbListSuccess
        });
        return false;
    },

    setAjaxDismissReminders: function (reminderIds) {
        var url = this._DismissUrl;
        var rids = [$.rclHelp.extractID(reminderIds)];
        var $pos = this.$spanCount;
        var self = this;

        var cbDismissError = function (e) { };

        var cbDismissBeforeSend = function () {
            $("<img/>").attr("src", self._spinner)
                .css(rclSettings.spinnerClass)
                .appendTo($('a#' + reminderIds));
        };

        var cbDismissSuccess = function (data) {
            $.rclHelp.debug('<cbDismissSuccess>, data-value=' + $pos.attr('data-value'));
            var num = parseInt($pos.attr('data-value')) - 1;

            setCookie("reminderCount", num, rclSettings.cookieExpire);

            self.showCount(num);

            $this_li = $('a.rl-button.rl-button-secondary[id=' + reminderIds + ']').closest('li');//rl-row-expanded
            $this_li.fadeOut(self._fadeInOut).hide();

            var $next = $this_li.next('li:visible');
            if ($next.length) {
                $next.find('div.rl-row.rl-item-expanded').show();
                $next.slideDown(self._fadeInOut, function () {
                    $.rclHelp.debug('<cbDismissSuccess>, next slideDown');
                });
                if (self._showMore) {
                    self.getAjaxReminderList(5, 1);
                }
            }
            else {
                // promise:
                if (self._showMore) {
                    self.getAjaxReminderList(4, 1);
                }
                else {
                    var $prev = $this_li.prev('li:visible');
                    if ($prev.length) {
                        $prev.find('div.rl-row.rl-item-expanded').show();
                        $prev.slideDown(self._fadeInOut, function () {
                            $.rclHelp.debug('<cbDismissSuccess>, prev slideDown');
                        });
                    }
                    else {
                        $.rclHelp.debug('<cbDismissSuccess>, no next and prev');
                        self.$spanCount.text('0').attr('data-value', 0);
                        $('a#ReminderCountLink').attr('title', "No reminders for today");
                        self.$divPopup.hide();
                        self.resetList();
                    }
                }
            }
            $this_li.remove();
        };

        /////////////////////////////

        dataServiceGate({
            httpMethod: "POST",
            url: url,
            data: rids,
            beforeSend: cbDismissBeforeSend,
            onSuccess: cbDismissSuccess,
            onError: cbDismissError
        });

        return false;
    },

    assembleListLi: function (val) {
        var name = val.name ? val.name.replace(/\</g, '&lt;') : '';
        if(!name) name = '&lt;No Cantact name&gt;';
        var rid = val.reminder_id;
        var idate = val.important_date.replace(/\s+.*$/, '');
        var df = $.rclHelp.show_date_diff(idate);
        var txt = this.displaySubMenu(idate, val);
        var li = '<li>' +
            '  <div class="rl-row rl-contact-name">' +
            '    <a target="_blank" href="' +
                  this._ContactUrl +
                  val.linked_entity_id + '&amp;activeView=0" id="n_' +
                  rid + '" class="rl-name">' +
                  name + '</a>' +
            '  </div>' +
            '  <div class="rl-row rl-descr">' + val.description.replace(/</g, '&lt;') +
            '    <span class="rl-dayCount">' + df + '</span>' +
            '  </div>' +
            txt +
            '</li>';

        return li;
    },

    //new Date(idate).toDateString().replace(/^\w{3}\s/, ''): Mon Apr 29 2013=>Apr 29 2013
    displaySubMenu: function (idate, val) {
        var cid = val.linked_entity_id;
        var rid = val.reminder_id;
        var rdesc = escape(val.description); //.replace(/</g, '&lt;');
        var finalDescription = escape(val.description + ', ' + idate);
        var wrapUpOnClick = 'onclick="' + 'WrapUpInfo.GetInfoFromList(\'' + cid + '\', \'' + rid + '\', \'' + finalDescription + '\');' + 'WrapUp.Create(1);' + '"';
        var phone = val.phone || '';
        var email = val.email || '';
        var photo = val.photo || ReminderCountList._defaultImg;
        var eid = "e_" + rid;
        var txt =
        '  <div class="rl-row rl-item-expanded" style="display:none;">' +
        '    <span class="rl-date"> ' + $.rclHelp.dateToFullYMD(idate) + ' </span>' +
        '    <div class="rl-contact-details">' +
        '        <a target="_blank" href="' +
                  this._ContactUrl +
                  val.linked_entity_id + '&amp;activeView=0" class="rl-contactImage">' +
        '          <img src="' + photo + '" title="' + rdesc + '" />' +
        '        </a>' +
        '        <ul class="rl-contact-info">';

        if (phone) {
            txt += '          <li><em class="ir icon action-rl-phone">call</em>' + '<span class="ellipsis">' + phone + '</span></li>';
        }
        if (email) {
            txt += '          <li> <a id="' + eid + '" href="#" ' +
            '             onclick="window_open(\'../Email/Compose.aspx?to=\' + this.innerText); return false;">' +
            '               <em class="ir icon action-rl-email">email</em>' + '<span class="ellipsis">' + email + '</span></a></li>';
        }

        txt += '        </ul>' +
        '    </div>' +
        '    <div class="rl-button-row"> ' +
        '      <a href="#" id="d_' + rid + '" class="rl-button rl-button-secondary">Dismiss</a> ' +
        '      <a href="#" id="w_' + rid + '" class="rl-button rl-button-primary" ' + wrapUpOnClick + '>Wrap Up</a>' +
        '    </div>' +
        '  </div>';
        return txt;
    },

    showCount: function (num) {
        var count = num!=undefined? num : getCookie('reminderCount');
        $.rclHelp.debug('<showCount>, count=' + count);

        $pos = this.$spanCount;
        $alnk = $('a#ReminderCountLink');

        if (count == 0) {
            $pos.text('0').attr('data-value', 0);
            $alnk.attr('title', 'No reminders for today');
            this.resetPopup();
        }
        else if (count > this._maxCount) {
            $pos.text(this._maxCount + '+').attr('data-value', count);
            $alnk.attr('title', count + ' reminders');
        }
        else {
            $pos.text(count).attr('data-value', count);
            if (count == 1) $alnk.attr('title', '1 reminder');
            else $alnk.attr('title', count + ' reminders');
        }
    },

    // if ($('#reminder_list_popup').hasClass('hide')) $('#reminder_list_popup').removeClass('hide'); // caused by overlay.
    showList: function (flag) {
        $.rclHelp.debug('<showList>, flag=' + flag);
        var self = this;
        $dpopup = this.$divPopup;
        if (flag == 1) {
            if (!$('div.rl-row.rl-item-expanded:first').is(':visible')) {
                $('div.rl-row.rl-item-expanded:first').show();
            }
            $dpopup.slideDown(ReminderCountList._fadeInOut, function () {
                if (ReminderCountList._mouseFlag) {
                    ReminderCountList._mouseFlag = false;
                    return;
                }
                $(this)
                    .find('ul.reminder-list>li:first')
                    .addClass('rl-row-expanded');
                $(this)
                    .delay(self._displayTime)
                    .slideUp(self._fadeInOut, function () {
                        self.resetPopup();
                        $.rclHelp.debug('===>, flag=1, slideDown 2');
                    });
            });
        }
            // re-click 'a#ReminderCountLink', behaviour should like flag=1
        else if (flag == 2) {
            if (!$('div.rl-row.rl-item-expanded:first').is(':visible')) {
                $('div.rl-row.rl-item-expanded:first').show();
            }
            $dpopup.slideDown(ReminderCountList._fadeInOut, function () {
                $(this)
                    .find('ul.reminder-list>li:first')
                    .addClass('rl-row-expanded');
            });
        }
            // cookie reminderCound lost.
        else if (flag == 3) {
            $.rclHelp.debug('Only the case when cookie[reminderCount] is lost.');
            //$dpopup.show().slideDown(ReminderCountList._fadeInOut);;
        }
            // showMore within next
        else if (flag == 4) {
            $dpopup.slideDown(ReminderCountList._fadeInOut);
        }
            //showMore within prev
        else if (flag == 5) {
            $dpopup.slideDown(ReminderCountList._fadeInOut);
        }
            //showMore click
        else if (flag == 6) {
            if (this._showMore>0) {
                $dpopup.show().slideDown(ReminderCountList._fadeInOut, function () { });
            }
        }
        else {
            $.rclHelp.debug('==+>, flag=' + flag);
        }
    }
}

; (function ($) {
    jQuery.rclHelp = {
        _month: [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ],
        _oneDay: 1000 * 60 * 60 * 24,
        _re: /^function\s+([^(]+)/,
        //function name: $.rclHelp._re.exec(arguments.callee.toString())[1]

        //<pre>,<p>,<code>,<a>
        //Usage: document.onclick=clickHandler;
        clickHandler: function (e) {
            var elem, evt = e ? e : event;
            if (evt.srcElement) elem = evt.srcElement;
            else if (evt.target) elem = evt.target;
            this.debug(elem.tagName.toUpperCase());
            return true;
        },

        // '2013-05-01' or '2013-04-30 00:00:00Z'
        get_date_diff: function (idate) {
            if (/\s+/.test(idate))
                idate = idate.replace(/\s+.*$/, '');
            d1 = idate.split('-');
            d2 = new Date(d1[0], d1[1]-1, d1[2]);
            today = new Date();
            return Math.ceil((d2.getTime()-today.getTime()) / this._oneDay);
        },
        // same interface with Jacqueline's codes:
        // var day = this.get_date_diff(idate);
        show_date_diff: function (idate) {
            var day = getDayDiff(idate);
            var df;
            if (day == 0)         df = ' today';
            else if (day == -1)   df = ' yesterday';
            else if (day < -1)    df = ' ' + Math.abs(day) + ' days ago';            
            else if (day == 1)    df = ' in 1 day';
            else if (day > 1)     df = ' in ' + Math.abs(day) + ' days';
            else                  df = ' in ' + Math.abs(day) + ' days.';            
            return df;
        },
        dateToYMD: function (date) {
            if (date == undefined) date = new Date();
            var d = date.getDate();
            var m = date.getMonth() + 1;
            var y = date.getFullYear();
            return '' + y + '-' + (m <= 9 ? '0' + m : m) + '-' + (d <= 9 ? '0' + d : d);
        },
        dateToFullYMD: function (important_date) {
            idate = important_date.split('-');
            date = new Date(idate[0], idate[1], idate[2]);
            var d = date.getDate();
            var m = date.getMonth();
            var y = date.getFullYear();
            return this._month[m-1] + ' ' + d + ', ' + y;
        },
        extractID: function (idStr) {
            return idStr.substr(2);
            //return idStr.replace(/\D+/g, '');
        },
        debug: function (log) {
            if (ReminderCountList._debug) {
                if (typeof (window.console) != 'undefined' || window.console !== undefined) {
                    console.log(log);
                }
            }
        }
    };
    $.extend({
        isMouseOut: function (element, evt) {
            if (element.contains && evt.srcElement) { //ie
                return !element.contains(evt.srcElement);
            } else if (evt.target) { //ff
                return ! $.containElement(element, evt.target);
            }
            return false;
        },
        containElement: function (container, containee) {
            var isParent = false;
            do {
                if ((isParent = container == containee))
                { break; }
                containee = containee.parentNode;
            }
            while (containee !== null);
            return isParent;
        }
    });
    $.extend($.fn, {
        do_nothing: function () {
            return;
        }
    });
})(jQuery);

$(function () {
    ///////////////// register all events //////////////////

    // register 'click' event.
    $('a#ReminderCountLink').bind('click', ReminderCountList.countLinkHandler);

    // register 'Show More' event.
    $('a.rl-button', 'div.rl-popup-button-row').bind('click', ReminderCountList.showMoreHandler);

    // register 'mouseover' for popup list.
    $('div.reminder-list-popup').one('mouseenter mouseleave', ReminderCountList.mouseHandler);

    /**
     * Note that you should replace #parent with the closest parent element to .closed which is available on page load 
     * - usually the element which .closed was appended to.
     * $('#parent').on('click', '.closed', function() { your code... });
     */
    $('div#reminder_list_popup').on('click', 'ul.reminder-list > li', ReminderCountList.ulListHandler);
    
    $('div#reminder_list_popup').on('click', 'a.coachClass', function (e) {
        e.stopPropagation();
        window.open($(this).attr('href'));
        return false;
    });

    // register 'Dismiss' event.
    $('ul.reminder-list').on('click', 'a.rl-button.rl-button-secondary', ReminderCountList.dismissHandler);

    // contact-name click
    $('ul.reminder-list').on('click', 'a.rl-name', ReminderCountList.contactHandler);

    //image click
    $('ul.reminder-list').on('click', 'a.rl-contactImage', function (e) {
        $(e.target).closest('li').find('a.rl-name').trigger('click');
        return false;
    });

    ///////////////// MAIN ENTRY to process //////////////////

    // cookie['reminderCount']:
    ReminderCountList.getCookieCount();

    ReminderCountList.getTokenUrl();

    if (ReminderCountList._rCount == -1) {
        ReminderCountList.getAjaxReminderList(1);
        setCookie('reminderRefresh', window.location.pathname, rclSettings.cookieExpire);

        // click anywhere to click the reminder list.
        $(document).on('click', 'body', ReminderCountList.hideonShowReminderListPopup);
    }
    else {
        ReminderCountList.showCount(ReminderCountList._rCount);

        if (ReminderCountList.$divPopup.is(':visible'))
            ReminderCountList.$divPopup.hide();
    }
});

if (typeof (Sys) !== 'undefined') { Sys.Application.notifyScriptLoaded(); }