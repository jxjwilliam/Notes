<% %>
Executes the ruby code within the brackets.

<%= %>
Prints something into erb file.

<% -%>
Avoids line break after expression.
<%- and -%> suppress leading and trailing whitespace

<%# %>
Comments out code within brackets; not sent to client (as opposed to HTML comments).
--------------------

puts "#{variable}"

chomp
@_
gets, puts, print

-------------------
@ - Instance variable of a class
@@ - Class variable, also called as static variable in some cases

A class variable is a variable that is shared amongst all instances of a class. This means that only one variable value exists for all objects instantiated from this class. This means that if one object instance changes the value of the variable, that new value will essentially change for all other object instances.

Another way of thinking of thinking of class variables is as global variables within the context of a single class. Class variables are declared by prefixing the variable name with two @ characters (@@). Class variables must be initialized at creation time

-------------------
 4.3.3 Hashes and symbols

Hashes are essentially a generalization of arrays: you can think of hashes as basically 
like arrays, but not limited to integer indices. (In fact, some languages, especially Perl, 
sometimes call hashes associative arrays for this reason.) Instead, hash indices, or keys, 
can be almost any object. 
So far we’ve used strings as hash keys, but in Rails it is much more common to 
use symbols instead.  


 in Rails it is much more common to use symbols instead. Symbols look kind of like strings, 
 but prefixed with a colon instead of surrounded by quotes. . For example, :name is a symbol. 
 You can think of symbols as basically strings without all the extra baggage.
 As a result of having less baggage, symbols are easier to compare to each other; 
 strings need to be compared character by character, while symbols can be compared all in one go.
 This makes them ideal for use as hash keys. 
 
