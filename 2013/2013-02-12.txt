------ 192.168.52.36 -----------
YML

CSRF

EJS

YAML:
 syntax was designed to be easily mapped to data types common to most high-level languages: list, associative array, and scalar.[4] Its familiar indented outline and lean appearance 
 make it especially suited for tasks where humans are likely to view or edit data structures, such as configuration files, dumping during debugging, and document headers 
 (e.g. the headers found on most e-mails are very close to YAML). Although well-suited for hierarchical data representation, 
 it also has a compact syntax for relational data as well.[5] Its line and whitespace delimiters make it friendly to ad hoc grep/Python/Perl/Ruby operations. 
 
 A major part of its accessibility comes from eschewing the use of enclosures like quotation marks, brackets, braces, and open/close-tags, which can be hard for the human eye to balance in nested hierarchies.
 
 
 
 
 
 webstorm (jetbrains.com)
 
 CoffeeScript
 
 
 
 sudo can't find npm:
 
 sudo /usr/bin/node/bin/npm install -g browserify
 
 sudo /usr/bin/node/bin/npm install -g uglify-js
 
 -----------------------------
 
 Uglify.JS (https://github.com/mishoo/UglifyJS) and jsBeautifier (http://jsbeautifier.org) wrapped using JavaScript.NET (http://javascriptnet.codeplex.com) for use in .NET projects.
 
 
 --------------------------
 
 moadmin.php not work:
 # setsebool httpd_can_network_connect 1 # setsebool httpd_can_network_connect_db 1 
 $ sudo service mongod restart
 
 --------------------------
 
 switch (params.format) {
  case 'json':
    send(object);
  break;
  case 'html':
    render();
  break;
}

Probably we can come with (in coffee):

@object = {}
respondTo (format) =>
  f.html => render()
  f.json => send @object
});

or in pure js:

this.object = {}
respondTo(function (f) {
    f.html(render);
    f.json(send.bind(this, this.object));
}.bind(this));

So, all we need is just implement 'respondTo' method in controller.js, something like:

Controller.prototype.respondTo = function (f) {
    var ctl = this;
    f({json: handleJSON, html: handleHTML}); // TODO: make extensible
    function handleJSON(fn) { if (ctl.req.params.format === 'json') fn(); }
    function handleHTML(fn) { if (ctl.req.params.format === 'html' || !ctl.req.params.format) fn(); }
};