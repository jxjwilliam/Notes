////// ng-bind vs. ng-model //////

ng-bind has one-way data binding ($scope --> view). It has a shortcut {{ val }} which displays the scope value $scope.val inserted into html.

ng-model is intended to be put inside of form elements and has two-way data binding ($scope --> view and view --> $scope) e.g. <input ng-model="val"/>.


HTML Validation Schemes

TML5: data-namespace-name: data-ng-repeat=item in items



/////////////////////////
-- Factory --
The Factory API call is used whenever we have a class or object that needs some
amount of logic or parameters before it can be initialized. A Factory is a function
that is responsible for creating a certain value (or object).

-- Service --
the difference between a Factory and a Service is that
the Factory invokes the function passed to it and returns a result. The Service invokes
¡°new¡± on the constructor method passed to it and returns the result.


-- Provider --
This is the most complicated (and thus most configurable, obviously) of the lot.
The Provider combines both the Factory and the Service, and also throws in the
benefit of being able to configure the Provider function before the injection system
is fully in place (in the config blocks, that is).

An Angular "service" is a singleton object created by a "service factory". These service factories are functions which, in turn, are created by a "service provider". 
"The service providers are constructor functions". When instantiated they must contain a property called $get, which holds the service factory function.

? With the factory you actually create an object inside of the factory and return it.
? With the service you just have a standard function that uses the this keyword to define function.
? With the provider there¡¯s a $get you define and it can be used to get the object that returns the data.


------ Directive ------
ng- Angular built-on directive

What ng-model does is behind the scenes it¡¯s going to add a property up in the memory called ¡°name¡± into what¡¯s called ¡°the scope¡±.


demoApp.directive('directiveName', function factory(injectables) {
    var directiveDefinitionObject = {
        priority: 0,
        template: '<div></div>',
        templateUrl: 'directive.html',
        replace: false,
        transclude: false,
        restrict: 'A',
        scope: false,
        compile: function compile(tElement, tAttrs, transclude) {
            return {
                pre: function preLink(scope, iElement, iAttrs, controller) { ... },
                post: function postLink(scope, iElement, iAttrs, controller) { ... }
            }
        },
        link: function postLink(scope, iElement, iAttrs) { ... }
    };
    return directiveDefinitionObject;
});


angualar.module('myModule', []).
config(['depProvider', function(depProvider){
...
}]).
factory('serviceId', ['depService', function(depService) {
...
}]).
directive('directiveName', ['depService', function(depService) {
...
}]).
filter('filterName', ['depService', function(depService) {
...
}]).
run(['depService', function(depService) {
...
}]);
