The ng-app attribute represents an Angular directive named ngApp (Angular uses name-with-dashes for its custom attributes and camelCase for the corresponding directives that implements them).

A scope can be seen as the glue which allows the template, model and controller to work together. Angular uses scopes, along with the information contained in the template, data model, and controller, to keep models and views separate, but in sync. Any changes made to the model are reflected in the view; any changes that occur in the view are reflected in the model.

Services are managed by Angular's DI subsystem. Dependency injection helps to make your web apps both well-structured (e.g., separate components for presentation, data, and control) and loosely coupled (dependencies between components are not resolved by the components themselves, but by the DI subsystem).

The $ prefix is there to namespace Angular-provided services. To prevent collisions it's best to avoid naming your services and models anything that begins with a $.

If you inspect a Scope, you may also notice some properties that begin with $$. These properties are considered private, and should not be accessed or modified.

function PhoneListCtrl($scope, $http) {...}
phonecatApp.controller('PhoneListCtrl', ['$scope', '$http', PhoneListCtrl]);


var phonecatApp = angular.module('phonecatApp', []);
phonecatApp.controller('PhoneListCtrl', ['$scope', '$http', function($scope, $http){} ]);


Application routes in Angular are declared via the $routeProvider, which is the provider of the $route service. This service makes it easy to wire together controllers, view templates, and the current URL location in the browser. Using this feature we can implement deep linking, which lets us utilize the browser's history (back and forward navigation) and bookmarks.

Note: Providers can only be injected into config functions. Thus you could not inject $routeProvider into PhoneListCtrl.

Angular modules solve the problem of removing global state from the application and provide a way of configuring the injector. As opposed to AMD or require.js modules, Angular modules don't try to solve the problem of script load ordering or lazy script fetching. These goals are totally independent and both module systems can live side by side and fulfil their goals.

The $route service is usually used in conjunction with the ngView directive. The role of the ngView directive is to include the view template for the current route into the layout template. 

------@@ ------
Data Binding
MVC
Routing
Testing
jqLite
Templates
History
Factories
ViewModel
Controllers
Views
Directives
Services
Dependency Injection 
Validation




------@@ karma installed in centos ------
npm install karma-chrome-launcher --save-dev
npm install karma-firefox-launcher --save-dev

in config/karma.conf.js:
browsers: ['Chrome', 'Firefox'],

//http://www.tecmint.com/install-google-chrome-on-redhat-centos-fedora-linux/
# wget http://chrome.richardlloyd.org.uk/install_chrome.sh
# chmod u+x install_chrome.sh
# ./install_chrome.sh
 
summary: 
*NO* need, too complicated.

------@@  Angular's end-to-end (E2E) test ------
provider: 
factory: return function;
service: constructor

function provider(name, _provider) {
  //_provider is function or array
  return providerCache[name+providerSuffix] = _provider;
}
function factory(name, factoryFn) {
  return provider(name, {$get: factoryFn }); 
}

function service(name, constructor) {
  return factory(name, [ '$injector', function($injector) {
    return $injector.instantiate(constructor);
  }]);
}

function value(name, value) { return factory(name, valueFn(value)); }

function constant(name, value) { 
  providerCache[name] = value;
  instanceCache[name] = value;
}