------@ LINKEDIN

Company:
william jiang software consulting inc..

Application Name:
william jiang

API Key:
75rz316ipx4su5

Secret Key:
4cBPi2S1LDyxXomE

OAuth User Token:
56fca561-7766-4293-976d-08e95544f7ec

OAuth User Secret:
c3ff7e20-700b-43a3-bfd0-1db68915618d


------@ 
LinkedinStrategy passport.js: { provider: 'linkedin',
  id: 'b2TPj7-abn',
  displayName: 'William Jiang',
  name: { familyName: 'Jiang', givenName: 'William' },
  emails: [ { value: 'jxjwilliam@gmail.com' } ],
  _raw: '{\n  "emailAddress": "jxjwilliam@gmail.com",\n  "firstName": "William",\n  "id": "b2TPj7-abn",\n  "lastName": "Jiang"\n}',
  _json: 
   { emailAddress: 'jxjwilliam@gmail.com',
     firstName: 'William',
     id: 'b2TPj7-abn',
     lastName: 'Jiang' } } 6135689e-5ce5-47ff-b106-3a4ef6ad70d7 ce8a1460-ac39-4b01-a21b-66db23f607ae
Mongoose: users.findOne({ 'linkedin.id': 'b2TPj7-abn' }) { fields: undefined }  
validateUniqueEmail function model(doc, fields, skipId) {
    if (!(this instanceof model))
      return new model(doc, fields, skipId);
    Model.call(this, doc, fields, skipId);
  }
  
  
Mongoose: users.find({ '$and': [ { email: 'jxjwilliam@gmail.com' }, { _id: { '$ne': ObjectId("541dd69dcc061ab41a4900b1") } } ] }) { fields: undefined }  
Mongoose: users.insert({ __v: 0, roles: [ 'authenticated' ], provider: 'linkedin', _id: ObjectId("541dd69dcc061ab41a4900b1"), username: 'jxjwilliam@gmail.com', email: 'jxjwilliam@gmail.com', name: 'William Jiang' }) {}  


Mongoose: users.findOne({ _id: ObjectId("541dd69dcc061ab41a4900b1") }) { fields: { hashed_password: 0, salt: 0 } }  

ObjectId("541de44873c2c38803b70fdb")
db.users.findOne({ _id: ObjectId("541de44873c2c38803b70fdb") }) { fields: { hashed_password: 0, salt: 0 } }
  