/*
(function(){}.call(this));
*/
(function() { this.init=function(){console.log('abc')}; }.call(this.init())); //abc


function assertEquals(a,b) { return typeof a === typeof b && a === b; }
assertEquals((function() { this.init=function(){ return 'abc' }; }.call(this.init())), 'abc'); //false
assertEquals((function() { this.init=function(){ return 'abc' }; }.call(this.init())), undefined) //true


------@Spine.ajax.js
(function() {
    var
	__slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { 
		for (var key in parent) { 
			if (__hasProp.call(parent, key)) 
				child[key] = parent[key]; 
		} 
		function ctor() { 
			this.constructor = child; 
		} 
		ctor.prototype = parent.prototype; 
		child.prototype = new ctor(); 
		child.__super__ = parent.prototype; 
		return child; 
	},
	 __indexOf = [].indexOf || function(item) { 
		for (var i = 0, l = this.length; i < l; i++) { 
			if (i in this && this[i] === item) return i; 
		} 
		return -1; 
	};

	var Base = (function() {
		function Base() {}
		Base.prototype.defaults = {..}
		Base.prototype.ajax = function(params, defaults) {
		  return $.ajax(this.ajaxSettings(params, defaults));
		};
		Base.prototype.ajaxSettings = function(params, defaults) {
		  return $.extend({}, this.defaults, defaults, params);
		};
		return Base;
	})();

	var Collection = (function(_super) {
	    __extends(Collection, _super);
		
		function Collection(model) {}		
		Collection.prototype.find = function(id, params, options) {}
		Collection.prototype.all = function(params, options) {}
		Collection.prototype.fetch = function(params, options) {}
		Collection.prototype.recordsResponse = function(params, options) {}
		Collection.prototype.failResponse = function(params, options) {}
		return Collection;		
	})(Base);
		
}).call(this);

------@Spine log:
  Log = {
    trace: true,
    logPrefix: '(App)',
    log: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!this.trace) {
        return;
      }
      if (this.logPrefix) {
        args.unshift(this.logPrefix);
      }
      if (typeof console !== "undefined" && console !== null) {
        if (typeof console.log === "function") {
          console.log.apply(console, args);
        }
      }
      return this;
    }
  };
  
// console.error() stop the script.  
function Error(message) { 
	this.name='error'; 
	this.message=message;
} 

/* True
input === undefined, 
input==null, input==undefined
*/
/* Error
params.async if params==undefined, use: params && params.async
*/
1. function abc(id, params, options) { if(options==null) console.log(id, params, options,typeof options);}


------@ P{name:'P', sayHi:function, getTime:function},   hi, 1407520542471 
var abc=(function() { 
	this.sayHi=function(){
		log('hi'); return this;
	}
	this.getTime=function(){
		log(new Date().getTime());
	}
	log(this, this.name); 
	return this; 
}).call(new P()).sayHi().getTime()