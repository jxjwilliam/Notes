------ @ FF addon ------
YSlow
jQuerify (FireQuery)
FireShot
ColorZilla
FireBug
MeasureIt
Web Developer


------ @ Chrome ------
AngularJS

------ @ CSS ------
CSS Sprites
font awesome(http://fortawesome.github.io/Font-Awesome/) / bootstrap
http://backbook.com/ (without trail '/', it will redirect)

Caching:
ExpiresDefault "access plus 5 years"
Cache-Control: max-age=3600, must-revalidate


------@ QUnit Vs. Jasmine and TDD Vs. BDD ------

Selenium automates browsers.


------ @ angularjs -----
MVC framework
Extends HTML
modules
routes and views to structure
DI code 

<html ng-app>
 <body>
   <div ng-init="myName='William'">
     Hello {{ myName }}
   </div>
   <script type="text/javascript" src="angular.js"></script>
 </body>
</html>


var app = angular.module('M1', ['M2', 'M3']);
And a module is attache to a page
<html ng-app="M1">...</html>


<div ng-controller="AppCtrl as app">
<select ng-model="app.templateValue">
  <option value="'frame1.html'">Frame 1</option>
  <option value="'frame1.html'">Frame 1</option>
</select>
<div ng-include="app.templateValue"></div>
</div>


------ @ $http: no callback, sync, promise ------
$scope.color = $http.get('/api/colors.json');
The scope will auto update itemself when $http returns gets a response.

var app=angular.module('myApp', ['ngResource']);
app.factory('Color', function($resource) {
  return $resource('/api/colors', {
    id: '@id'
  }, {
    find : { method: 'GET' },
	query : { method : 'GET', isArray: true },
	create: { method: 'POST' },
	update: { method: 'PUT' },
	destroy: { method: 'DELETE' }
  });
});
app.controller('ColorsCtrl', function($scope, Color) {
  $scope.colors = Color.query();
});

// outside scope, or using 3rd codes, notify angular to update itself by using $apply
$scope.$apply(function() {
  $scope.$emit('clicked');
});


------@ Unit Testing ------
Unit testing is available via the aungular-mocks.js file
Both Jasmine and Mocha are supported

------@ E2E Testing ------
Supported currently by using angular-scenario.js and soon to be with Protractor.
Uses a working web URL and performs assertions using a Jasmine-style matcher system

------@ Animations ------
ngAnimate 
CSS3 Transitions + CSS3 Keyframe Animations are auto triggered and rendered
Just include a CSS class on the ngView element

<div ng-view class="my-view"></div>

.my-view {......}
app.animation('.my-view', function() {
 return {
   enter: function(element, done) {
     jQuery(element).animate({
	   opacity: 1
	 }, done);
   },
   leave: function(element, done) {
     jQuery(element).animate({
	   opacity: 0
	 }, done);
	}
  };
});

yom.nu/springone-code, yom.nu/springone-demo
The $promise API
Form Validation
$scope Events



------ @ backbone.js ------

Underscore.js or lodash
jQuery or zepto.js


// Tell Backbone to start monitoring the changes in browser history:
Backboone.history.start();

// HTML5 History API (commonly known as pushState) can be enabled with:
Backbone.history.start({ pushState: true });

------ @ Models and COllections ------
// Both Model and Collection proxy functional methods from underscore	
var Item = Backbone.Model.extend{{
 // Point to an external REST resource to sync with.
 url: ""
 });
 
 var ItemCollection = Backbone.Collection.extend({
   model: Item
 });
 
 // Initialize the Model.
 var item = new Item();
 
 // Add a new property.
 item.set('newProp', 'alue');
 
 
 ------@ http://localhost:3000/form.html ------
The best way is to set static folder. In app.js:
app.use(express.static(path.join(__dirname, 'public')));
so:  public/css/form.html -> http://localhost:3000/form.html 

You can create your file cache, Use method fs.readFileSync:
var cache = {};
cache["index.html"] = fs.readFileSync( __dirname + '/public/form.html');

app.get('/', function(req, res){    
    res.setHeader('Content-Type', 'text/html');
    res.send( cache["index.html"] );                                
});


===================================
extension=php_sockets.dll 

------ @ cmd run as Adminstrator: ------
npm install -g express-generator

tasklist /v

$ npm -e -H express_backbone
$ npm install mongoose --save



------@ ------
express -e Paypal
cd PayPal && npm install


------ @ NOSQL Database ------
Cassandra
Redis
Mmcached
MongoDB
Hadoop
CouchDB

------ @ Mongoose Attributes ------
String
Number
Date
Boolean
Buffer
ObjectID
Mixed
Array

------ @ grunt, supervisor, nodemon, node-inspector ------

font awesome
http://www.lipsum.com/
tinyurl



------@ What is http-server ------

$ npm install http-server

William@HOME ~/WebstormProjects/angularjs-demo-cms-repo (master)
$ ./node_modules/.bin/http-server  -p 8888 ./app


-------------------------------
<td><a href="/paypal/getOne" id="<%= res._id %>"><%= res.name %></a></td>

------ @ typeof vs instanceof ------

callback instanceof Function
typeof callback == "function"

(1) Use instanceof for custom types:
-------------------------------------
var ClassFirst = function () {};
var ClassSecond = function () {};
var instance = new ClassFirst();
typeof instance; // object
typeof instance == 'ClassFirst'; //false
instance instanceof Object; //true
instance instanceof ClassFirst; //true
instance instanceof ClassSecond; //false 


(2) Use typeof for simple built in types:
------------------------------------------
'example string' instanceof String; // false
typeof 'example string' == 'string'; //true
'example string' instanceof Object; //false
typeof 'example string' == 'object'; //false
true instanceof Boolean; // false
typeof true == 'boolean'; //true
true instanceof Object; // false
99.99 instanceof Number; // false
typeof 99.99 == 'number'; //true
function() {} instanceof Function; //true
typeof function() {}; //function

(3) Use instanceof for complex built in types:
-----------------------------------------------

/regularexpression/ instanceof RegExp; // true
typeof /regularexpression/; //object
[] instanceof Array; // true
typeof []; //object
{} instanceof Object; // true
typeof {}; //object


-----------------------
var Person = function(name) { this.name = name; }

var o={}
Person.apply(o, ['william'])

var p = new Person('bill')

Person.prototype.getName = function() { return this.name;}
p.getName(); //"bill"
o.getName(); //TypeError: undefined is not a function
o.__proto__ = Person.prototype
o.getName(); //"william"

// other way:
var o2 = {}
Person.call(o2, 'test');
o2.__proto__ = p.constructor.prototype;
o2.getName(); //'test'
