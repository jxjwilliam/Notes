Configure error reporting settings

It is important to configure PHP~Rs error reporting settings depending on which phase of development the web application is
currently in. Generally, the programmer wants to see all warnings and errors in the web browser during the initial phase of
development, and later, once the site has launched, send error messages to a log file so that visitors do not see them.

Error Reporting for Development

During development, you want to display all errors and warnings to the browser.

// Report all PHP errors
ini_set('error_reporting', E_ALL);
// Set the display_errors directive to On
ini_set('display_errors', 1);

Error Reporting for Production

In production, you may want to lower the error reporting level and not display errors to the browser.
view sourceprint?
// Report simple running errors
ini_set('error_reporting', E_ALL ^ E_NOTICE);
// Set the display_errors directive to Off
ini_set('display_errors', 0);
// Log errors to the web server's error log
ini_set('log_errors', 1);


Logging errors


You can use the PHP function error_log() to send errors to your own log file or an e-mail address. This is particularly
important since most developers on campus do not have access to the web servers logs. Used in conjunction with a custom error
handler, error_log() is especially useful.
// Destinations
define("ADMIN_EMAIL", "nobody@stanford.edu");
define("LOG_FILE", "/my/home/errors.log");
// Destination types
define("DEST_EMAIL", "1");
define("DEST_LOGFILE", "3");
/* Examples */
// Send an e-mail to the administrator
error_log("Fix me!", DEST_EMAIL, ADMIN_EMAIL);
// Write the error to our log file
error_log("Error", DEST_LOGFILE, LOG_FILE);


////////////////////////////
How to dynamically check number of arguments of a function in php?
. func_get_args
. func_num_args


///////////////////////////
There are three main API options when considering connecting to a MySQL database server:

. PHP's MySQL Extension
. PHP's mysqli Extension
. PHP Data Objects (PDO)

Each has its own advantages and disadvantages. 

The MySQLi extension provides various benefits with respect to its predecessor, the most prominent of which are:
. An object-oriented interface
. Support for prepared statements
. Support for multiple statements
. Support for transactions
. Enhanced debugging support
. Embedded server support


///////////////////////////////
To prevent all requests made with a certain browser, e.g. Internet Explorer, from getting logged, you could use:

SetEnvIf User_Agent "(MSIE)" dontlog

To not log requests from any client whose hostname ends in bla.example.com, use:

SetEnvIf Remote_Host "bla.example.com$" dontlog

To not log requests from any client whose hostname begins with example, use:

SetEnvIf Remote_Host "^example" dontlog

To not log requests from a certain IP address, use something like:

SetEnvIf Remote_Addr "192\.168\.0\.154" dontlog

If you don't want requests of your robots.txt to get logged, use:

SetEnvIf Request_URI "^/robots\.txt$" dontlog

Apart from SetEnvIf, which is case-sensitive, you can use SetEnvIfNoCase which is case-insensitive.

For example, in order not to log certain search engine spiders, you could use:

SetEnvIFNoCase User-Agent "Slurp/cat" dontlog
SetEnvIFNoCase User-Agent "Ask Jeeves/Teoma" dontlog
SetEnvIFNoCase User-Agent "Googlebot" dontlog
SetEnvIFNoCase Remote_Host "fastsearch.net$" dontlog