------@ use UI Bootstrap to replace bootstrap.js: ------
$ bower install angular-bootstrap --save

Install global dev dependencies: 
$ npm install -g grunt-cli karma
$ npm install grunt


yo init angular:route home
- app/scripts/controllers/home.js
- test/specs/controllers/home.js
- app/views/home.html
- app/scripts/app.js -> add controllers/home.js

npm install -g grunt-cli
npm install -g karma




------@ readme(issue3)  ------
When an Angular application needs some data from a server, it calls the $http service, which sends the request to a real server using $httpBackend service. 


Fake HTTP backend implementation suitable for unit testing applications that use the $http service: https://docs.angularjs.org/api/ngMock/service/$httpBackend
Foke HTTP backend implementation suitable for end-to-end(E2E) testing or backend-less development: https://docs.angularjs.org/api/ngMockE2E/service/$httpBackend






------@ karma vs. protractor ------

Angular-seed is using Protractor/Selenium WebDriver for E2E but the angular-phonecat tutorial uses karma.
Use Karma for unit tests and Protractor for E2E?
 
Angular Scenario Runner is in maintenance mode - If you're starting a new Angular project, consider using Protractor.

//http://stackoverflow.com/questions/21732379/should-i-be-using-protractor-or-karma-for-my-end-to-end-testing
Karma is a great tool for unit testing, and Protractor is intended for end to end or integration testing. 
This means that small tests for the logic of your individual controllers, directives, and services should be run using Karma. 
Big tests in which you have a running instance of your entire application should be run using Protractor. 
Protractor is intended to run tests from a user's point of view - if your test could be written down as instructions for a human interacting with your application, 
it should be an end to end test written with Protractor.


Create and run unit tests, with Karma. ( Karma - unit test runner )
Create and run end to end tests, with Protractor. ( Protractor - end to end (E2E) test runner )
 
------@ $http ------
(1) deferred/promise:
The $http API is based on the deferred/promise APIs exposed by the $q service. 
For a higher level of abstraction, please check out the $resource service.

(2) return status:
$http:
A response status code between 200 and 299 is considered a success status and will result in the success callback being called. 
Note that if the response is a redirect (304), XMLHttpRequest will transparently follow it, 
meaning that the error callback will not be called for such responses.

(3) test:
$httpBackend.expectGET(...);
$http.get(...);
$httpBackend.flush();

(4) headers
$httpProvider.defaults.headers


------@ create webduct-ui ------
mkdir webduct-ui && cd ~
yo angular
npm install
bower install
grunt test // FAILED

in Gruntfile.js: change: test/karma.conf.js -> ./karma.conf.js
npm install karma-jasmine --save-dev
npm install karma-chrome-launcher --save-dev
npm install karma-safari-launcher --save-dev



------@ karma ------
(1)
node C:\Users\William\AppData\Roaming\npm\node_modules\karma-cli\bin\karma <command>
or:
npm install karma-cli (-g) not work.

(2)
karma init karma.conf.js


------@ batarang ------
Webstorm + Karma-Jamine

(1) ctrl+shift+a: JavaScript

(2) 
JavaScript -> Libraries -> Add:
Name: Karma-Jasmine
Add...->Attach Files: node_modules\karma-jasmine\lib\jasmine.js
(3) 
Manage Scopes: 'test' folder.

(4)
Then in karma.conf.js:
        files: [
            'test/spec/*Spec.js'
        ],

(5) in Gruntfile.js:
        karma: {
            unit: {
                configFile: 'karma.conf.js',
                singleRun: true
            }
        }
		
(6) Run->	Debug 'karma.conf.js'.
It should work.	