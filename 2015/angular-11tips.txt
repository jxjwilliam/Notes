
1. Minimize/Avoid Watchers

Angular uses dirty checking to keep track of all the changes in app. This means it will have to go through every watcher to check if they need to be updated (call the digest cycle). If one of the watcher is relied upon by another watcher, Angular would have to re-run the digest cycle again, to make sure that all of the changes has propagated. 


Watches are set on:
. $scope.$watch
. {{ }} type bindings
. Most directives (i.e. ng-show)
. Scope variables scope: { bar: '='}
. Filters {{ value | myFilter }}
. ng-repeat


Watchers (digest cycle) run on
. User action (ng-click etc). Most built in directives will call $scope.apply upon completion which triggers the digest cycle.
. ng-change
. ng-model
. $http events (so all ajax calls)
. $q promises resolved
. $timeout
. $interval
. Manual call to $scope.apply and $scope.digest



2. Avoid ng-repeat. If you have to use ng-repeat use infinite scrolling or pagination

For example a unique step id, is a good value to track by when doing an ng-repeat.

<li ng-repeat="Task in Tasks track by Task.Id></li>


3. Use Bind once when possible

Angular 1.3 added :: notation to allow one time binding. In summary, Angular will wait for a value to stabilize after it’s first series of digest cycles, and will use that value to render the DOM element. After that, Angular will remove the watcher forgetting about that binding.
https://code.angularjs.org/1.3.15/docs/guide/expression#one-time-binding


4. Use $watchCollection instead of $watch (with a 3rd parameter)

$watchColleciton acts almost like $watch with a 3rd parameter, except it only checks the first layer of object’s properties, thus greatly improving the performance.


5. Avoid repeated filters and cache data whenever possible


6. Debounce ng-model

ng-model-options="{ debounce: 250 }


7. Use ng-if instead of ng-show (but confirm that ng-if is actually better for your case

ng-show will render an element, and use display:none to hide it,
ng-if will actually removes the element from DOM, and will re-create it, if it’s needed.

You may need ng-show for an elements that toggles on an off often, but for 95% of the time, ng-if is a better way to go.



8. Use console.time to benchmark your functions


9. Use native JavaScript or Lodash for slow functions


10. Use Batarang to benchmark your watchers


11. Use Chrome Timeline and Profiler to identify performance bottlenecks