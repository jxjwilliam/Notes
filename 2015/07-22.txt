<h4>compile, link</h4>

If you create a directive that only has a link function, AngularJS treats the function as a post-link function. Hence the reason to discuss it here first.

The pre-link function is guaranteed to run on an element instance before any post-link function of its child elements has run.

A pre-link function of an element is guaranteed to run before any pre-link or post-link function of any of its child elements.


<h4>angular.js $destroy event - should I manually unbind?</h4>

If you do $scope.$on('someEvents', handleSomeEvent);, once the scope is destroyed (eg when you go to another page/view in your app), the event is automatically removed.

One important thing to note though, is that $rootScope is of course never destroyed, unless you quit your app. So if you do $rootScope.$on('someEvents', handleSomeEvent);, you may have to remove the event yourself, depending on where you listen to the event:

1. if in a controller or directive, then you'll have to remove it manually, else each time you'll instantiate the controller, a new event will be attached, and so handleSomeEvent will be called many times
2. if in a service, then you do not need to remove it manually, as services are always singleton (note that in Angular service, factory, ... all end up being the same thing)


<h4>Angular directive to scroll to a given item</h4>
<div id="items" >
  <ul class="standard-list">
    <li ng-repeat="item in items" scroll-if="item.id == first_unread_id" other="{{somestuff}}">
      <span class="content">{{ item.content }}</span>
    </li>
  </ul>
</div>

app.directive('scrollIf', function() {
  return function(scope, element, attrs) {
    scope.$watch(attrs.scrollIf, function(value) {
      if(value) {
      }
    });
    scope.$observe(attrs.other, function(value) {
    });
  }
});


<h4>Angularjs passing object to directive</h4>

<div walk-map="store.walks"></div>

app.directive('walkMap', function() {
  restrict: 'A',
  transclude: true,
  scope: { walks: '=walk-map' },
  template: '<p>{{walks}}</p> <div id="map_canvas"></div>',

  link: function(scope, element, attrs) {
    // scope.walks.$promise.then(function(walks) { ... });
    scope.$watch('walks', function(walks) {
      if(walks) { ... }
    });
  }
});

Since you are using $resource to obtain your data, the directive's link function is running before the data is available
(because the results from $resource are asynchronous), so the first time in the link function scope.walks will be empty/undefined.
Since your directive template contains {{}}s, Angular sets up a $watch on walks, so when the $resource populates the data,
the $watch triggers and the display updates.
This also explains why you see the walks data in the console -- by the time you click the link to expand the scope, the data is populated.


///////////////////////
Number.NaN;

this.$$rawModelValue = undefined;

//curry:
// $interpolate(attrs.name)(scope);
$interpolate = function(name) {
  return function($scope) {
    return $scope.name;
  }
}

cache.hasOwnProperty(name+'Provider')

providerCache = {
  $provide: {
    provider:,
    factory:,
    service: ,
    value: ,
    constant: ,
    decorator:
  }
}


function inherit(parent, extra) {
  return angular.extend(Object.create(parent), extra);
}

angular.extend({}, this.current.params, newParams);

if(status === 200) {}
else {
  throw $Error('error', '');
}



var ary = [1,2,3,4,5,6];
[].slice.call(ary, 1); //2,3,4,5,6
ary.shift(); // 1


