json3, es5-shim
================
json3 and es5-shim have been removed as Angular 1.3 has dropped IE8 support and that is the last version that needed these shims. 

If you still require these, you can include them with: 
$ bower install --save json3 es5-shim.
wiredep should add them to your index.html file but if not you can manually add them.


yeoman angular
===============
yo angular:route myRoute
yo angular:controller myController
yo angular:filter myFilter
yo angular:directive myDirective
yo angular:service myService
yo angular:provider  myProvider
yo angular:factory  myFactory
yo angular:value  myValue
yo angular:constant  myConstant
yo angular:decorator  myDecorator
yo angular:view myView


yeoman fullstack
=================
yo angular-fullstack:endpoint message

yo angular-fullstack:route myRoute
yo angular-fullstack:controller myController
yo angular-fullstack:filter myFilter
yo angular-fullstack:directive myDirective
yo angular-fullstack:service myService
yo angular-fullstack:provider  myProvider
yo angular-fullstack:factory  myFactory
yo angular-fullstack:decorator  myDecorator

# This sub-generator is deprecated.:
#yo angular-fullstack:view myView
#yo angular-fullstack:value  myValue
#yo angular-fullstack:constant  myConstant


tips
====
function fn($document, $log, $browser) {}
fn.$inject = ['$document', '$log', '$browswer'];
angular.module([]) .provider('fn', function() {
  this.$get = fn;
});


youtube: directives
=====================
window.onload = function() {

	var $rootElement = angular.element(window.document);

	var modules = ['ng', 'myApp', function($provide) {} ];
	
	var $injector = angular.injector(modules);

	var $compile = $injector.get('$compile');
	var compositeLinkFn = $compile($rootElement);

	var $rootScope = $injector.get('$rootScope');
	compositeLinkFn($rootScope);

	$rootScope.$apply();
}


//<div demo-greet="name"></div>
link: function(...) {

   scope.$watch(attrs.demoGreet, function(name) {});

   element.bind('click', function() {
     scope.$apply(function() {
	   $parse(attrs.demoGreet).assign(scope, 'abc');
	 });
   });
}


//<div class="demo-greet:name"></div>
(?) overwrite bootstrap class by:
terminal: true,
priority: 100
restrict: 'A'


//2-way binding: <profile email="email"></profile>
//reference, object, expression.
scope: {
  email: '=',

}
//1-way interpolate:<profile email="{{email}}"></profile>
//always string, not update, ng-src, image.
scope: {
  email: '@',
}


transclution:
=============
//<zippy title="{{greeting}}"></zippy>
app.directive('zippy', function() {
  return {
    restrict: 'E',
	scope: {
	  title: '@'
	},
	templateUrl: 'zippy.html', //ng-translcude
	transclude: true,
	controller: function($scope) {
	  $scope.name = 'working?';
	},
	link: function(scope, element, attrs) {
	}
  }
});


// {{email|gravatar}}
app.filter('gravatar', function(md5) {
  var cache = {};
  return function(text, defaultText) {
    return cache[text];
  };
});



node
=====
process: process.cwd(); 
```javascript
  process.argv.forEach(function(val, index) {
    
  }
```

Buffer
global


////////////
webpack
angular-formly
react.js
ngBoilerplate
node-http-server
http-server



/////////// <div debug></div>
app.directive('debug', function($compile) {
 return {
  terminal: true,
  priority: 1000,
  link: function(scope, element, attrs) {
    var clone = element.clone();
    clone.removeAttr('debug');
    var newElement = $compile(clone)(scope);
    element.after(newElement);
    scope.$apply();
  });
}
});


// webstorm: live templates

- Angularjs Controller is just javascript constructor function, nothing more.


// auto wrap $scope.$apply:

AngularJS actually calls almost all of your code within an $apply call. Events like ng-click, controller initialization, $http callbacks are all wrapped in $scope.$apply().

In other words, ng-click, http, timeout auto call $apply().
AngularJS provides wrappers for common native JS async behaviors:

1. Events => ng-click
1. Timeouts => $timeout
1. jQuery.ajax() => $http

This is just a traditional async function with a $scope.$apply() called at the end, to tell AngularJS that an asynchronous event just occurred.


AngularJS provides $timeout, which is like setTimeout, but automatically wraps your code in $apply by default.



https://github.com/williamjxj?tab=repositories; http://github.com/jxjwilliam; http://github.com/williamjiang