beforeEach(function () {
  module(function ($provide) {
    $provide.constant('APP_CONFIG', { someUrl: '/dummyValue' });
  });
});


The way to extend 3rd-party directives:

1. customize the 3rd-party opensource directly, modify for the specific purpose.
2. use $provide.decorator() to overwrite or add new stuff against the origin.
3. from stackoverflow: Probably the simplest way to solve this is to create a directive on your app with the same name as the third party directive. Both directives will run and you can specify their run order using the priority property (higher priority runs first).
The two directives will share scope and you can access and modify the scope of the third party directive via your directive’s link method.
4. You can also access a third party directive’s scope by simply putting your own arbitrarily named directive on the same element with it (assuming neither directive uses isolate scope). All non-isolate scope directives on an element will share scope.


The Bootstrap 3 grid system has four tiers of classes: xs (phones), sm (tablets), md (desktops), and lg (larger desktops). You can use nearly any combination of these classes to create more dynamic and flexible layouts.

Each tier of classes scales up, meaning if you plan on setting the same widths for xs and sm, you only need to specify xs.


ws://smart.dsnyad.nycnet/smart-opsboard/wsboard/BKN05/20151009/websocket


///////Angular Expressions vs. JavaScript Expressions

Angular expressions are JavaScript-like code snippets that are usually placed in bindings such as {{ expression }}.


Angular expressions are like JavaScript expressions with the following differences:

Context: JavaScript expressions are evaluated against the global window. In Angular, expressions are evaluated against a scope object.

Forgiving: In JavaScript, trying to evaluate undefined properties generates ReferenceError or TypeError. In Angular, expression evaluation is forgiving to undefined and null.

No Control Flow Statements: You cannot use the following in an Angular expression: conditionals, loops, or exceptions.

No Function Declarations: You cannot declare functions in an Angular expression, even inside ng-init directive.

No RegExp Creation With Literal Notation: You cannot create regular expressions in an Angular expression.

No Comma And Void Operators: You cannot use , or void in an Angular expression.

Filters: You can use filters within expressions to format data before displaying it.

If you want to run more complex JavaScript code, you should make it a controller method and call the method from your view. If you want to eval() an Angular expression yourself, use the $eval() method.


//////
Pseudo-Code of $apply()
function $apply(expr) {
  try {
    return $eval(expr);
  } catch (e) {
    $exceptionHandler(e);
  } finally {
    $root.$digest();
  }
}

Usually, you don't call $digest() directly in controllers or in directives. Instead, you should call $apply() (typically from within a directive), which will force a $digest().


$scope.$apply() vs $scope.$apply(fn)

Sometimes I see examples where data is updated, and then $scope.$apply() is called with no arguments. This achieves the desired result, but misses some opportunities.

If your code isn’t wrapped in a function passed to $apply, and it throws an error, that error is thrown outside of AngularJS, which means any error handling being used in your application is going to miss it. $apply not only runs your code, but it runs it in a try/catch so your error is always caught, and the $digest call is in a finally clause, meaning it will run regardless of an error being thrown. That’s pretty nice.

Hopefully now you understand what $apply is and when to use it. If you only use what AngularJS provides you, you shouldn’t need to use it often. But if you begin writing directives where you are observing DOM elements directly, it is going to become necessary.


//////

While I am working on this investigation, I debug web-socket to check the data which the client subscribe or send.

When I visit rabbitmq service on production: http://smart.dsnyad.nycnet:15672/, it is the same username/password with locally, so easily get it. It seems unsecurity.