1. DOMContentLoaded
1. readystatechange
1. load
1. beforeunload
1. unload


### DOMContentLoaded

The DOMContentLoaded event is fired when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading. A very different event - load - should be used only to detect a fully-loaded page. 

```javascript
<script>
document.addEventListener('DOMContentLoaded', function(event) {
	console.log('DOM fully loaded and parsed.');
});
</script>
```

### onLoad


### async, defer
```javascript
<script src="demo_async.js" async></script>
```

When present, it specifies that the script will be executed asynchronously as soon as it is available.

Note: The async attribute is only for external scripts (and should only be used if the src attribute is present).

Note: There are several ways an external script can be executed:

1. If async is present: The script is executed asynchronously with the rest of the page (the script will be executed while the page continues the parsing)
1. If async is not present and defer is present: The script is executed when the page has finished parsing
1. If neither async or defer is present: The script is fetched and executed immediately, before the browser continues parsing the page

```javascript
<scirpt>
document.addEventListener('load', myScript);
</script>
```


### All scripts should be loaded last
It's best to place all your script references at the end of the page, just before </body>.

If you are unable to do so due to templating issues and whatnot, decorate your script tags with the defer attribute so that the browser knows to download your scripts after the HTML has been downloaded:
```javascript
<script src="my.js" type="text/javascript" defer="defer"></script>
```

### Put Scripts at the Bottom
The problem caused by scripts is that they block *parallel downloads*.   The HTTP/1.1 specification suggests that browsers download no more than two components in parallel per hostname. If you serve your images from multiple hostnames, you can get more than two downloads to occur in parallel. While a script is downloading, however, the browser won't start any other downloads, even on different hostnames. In some situations it's not easy to move scripts to the bottom. If, for example, the script uses document.write to insert part of the page's content, it can't be moved lower in the page. There might also be scoping issues. In many cases, there are ways to workaround these situations.

An alternative suggestion that often comes up is to use deferred scripts. The *DEFER* attribute indicates that the script does not contain document.write, and is a clue to browsers that they can continue rendering. If a script can be deferred, it can also be moved to the bottom of the page. That will make your web pages load faster.


###

1. For external scripts (Google analytics, 3rd party marketing trackers, etc.) place them before the </body> tag.
1. For scripts that affect page layout, place in head.
1. For scripts that rely on 'dom ready' (like jquery), consider placing before </body> unless you have an edge-case reason to place scripts in head.
1. If there are inline scripts with dependencies, place the required scripts in head.