

The following I wrote 4 functions to operate DMP:
getDMP ()                   //return cookie DMP
getDMPLength()      //return cookie DMP length
setDMP(dmp-string)     // set DMP cookie with dmp-string
appendDMP(dmp-string)  // append dmp-string to DMP cookie

function getDMP() {
	return webmd.cookie.getJson('ads_perm', {domain: "webmd.com"}).segvar;
}

function getDMPLength() {
	return webmd.cookie.getJson('ads_perm', {domain: "webmd.com"}).segvar.length;
}

function setDMP(dmp) {

	var ads_perm_value = '';
	dmp.split(',').forEach(function(v) {
	  ads_perm_value += 'l_' + v + 'x';
	});
	var ads_perm_obj = { 'segvar': ads_perm_value };
	webmd.cookie.setJson('ads_perm', ads_perm_obj, {domain: "webmd.com"});
	return webmd.cookie.getJson('ads_perm', {domain: "webmd.com"}).segvar;
}


function appendDMP(dmp) {

	//(1) get old-dmp from cookie['ads_perm']:
	var old_dmp = [];
	var cookieValue = webmd.cookie.getJson('ads_perm', {domain: "webmd.com"}).segvar;
	var splitCookie = cookieValue.split(/(x)?l_/);

	splitCookie.forEach(function(v) {
	  if( (typeof v !== 'undefined') && (v !== 'segvar') && (v !== 'x') ){
	    old_dmp.push(v);
	  }
	});

	dmp += old_dmp.join(',');
	var ads_perm_value = '';
	dmp.split(',').forEach(function(v) {
	  ads_perm_value += 'l_' + v + 'x';
	});

	var ads_perm_obj = { 'segvar': ads_perm_value };
	webmd.cookie.setJson('ads_perm', ads_perm_obj, {domain: "webmd.com"});
	return webmd.cookie.getJson('ads_perm', {domain: "webmd.com"}).segvar;
}


//////////////// use these codes for test and monitoring:

(1) open ‘perf.webmd.com’.

(2) In chrome console, copy and paste the above 4 function.

(3) then, we can use them. Run:
 
getDMP();

getDMPLength();

var dmp = "a2816,a32925,a131179,a127022,z00182,a118963,a2790,z030159,a00087,a2836,z00127,a2804,a2808,a2800,a33116,a32934,a123035,a2865,a129792,a01503,a2828,a33079,a2794,z30287,a2900,a32930,z00200,z02999,a2798,a32965,a111,a222,a333,a444,a555,a666,a777,a888,a999,a100";
var ary=[];
for (var i=0; i<1000; i++) {
  ary.push(Math.floor(Math.random() * 10000));
}

setDMP(dmp);

appendDMP(dmp);

getDMP();

getDMPLength();


(4) In this way, we can control DMP values quickly,  intuitive and accurate, could make test faster and faster.

E.g.:

appendDMP(dmp) ;
Will return:
"l_a2816xl_a32925xl_a131179xl_a127022xl_z00182xl_a118963xl_a2790xl_z030159xl_a00087xl_a2836xl_z00127xl_a2804xl_a2808xl_a2800xl_a33116xl_a32934xl_a123035xl_a2865xl_a129792xl_a01503xl_a2828xl_a33079xl_a2794xl_z30287xl_a2900xl_a32930xl_z00200xl_z02999xl_a2798xl_a32965xl_a2816xl_a32925xl_a131179xl_a127022xl_z00182xl_a118963xl_a2790xl_z030159xl_a00087xl_a2836xl_z00127xl_a2804xl_a2808xl_a2800xl_a33116xl_a32934xl_a123035xl_a2865xl_a129792xl_a01503xl_a2828xl_a33079xl_a2794xl_z30287xl_a2900xl_a32930xl_z00200xl_z02999xl_a2798xl_a32965xx"

getDMPLength();
Will return:
531


I can improve  these functions depending on feedback.

Thanks,
William Jiang



A request is made from the user's browser to the ad server for gpt.js, the tagging JavaScript.

The tagging JavaScript builds and sends one or more requests (depending on whether single-request mode is enabled) to the ad server for ads tagged on the page.

The ad server recognizes the ad units and any key-values contained within the request.

The ad server selects and returns the best matching ad.

The JavaScript code associated with the ad tag displays the ad on the page.

 
 Here's a breakdown of some of the key query parameters:

- iu_parts: Comma separated list of the ad path elements of the page.
- prev_iu_szs: A comma separated list of the sizes of each ad slot on the page, slots that have multiple sizes will have a pipe separating each size.
- prev_scp - Slot specific targeting parameters.
- cust_params - Global targeting parameters.
- biw/bih: Browser width/height.


- iu_parts contains the network code and ad targets for all the ads. For example: 4312434,Consumer,WebMDCore
- cust_params contains ad targeting values used for all ads on the page. For example, it contains the topic id for the page and other information.
- prev_scp contains ad targeting values used for individual ads. For example, it contains the pos value for each ad.
- prev_iu_sza contains the sizes requested for individual ads.


Character limits for GPT ad requests
Google Publisher Tags use the HTTP GET method to request ads, which limits the number of bytes that can be passed with each request. Ad tags using synchronous rendering are limited to 2048 characters per request. However, if the tag type is asynchronous and exceeds 2048 characters, GPT automatically uses the POST method, which increases this limit to 8192 characters.*
* The character limit increase with the POST method does not apply to ads rendering in IE versions 9, and below.



Maximum URL length is 2083 characters in Internet Explorer

Microsoft Internet Explorer has a maximum uniform resource locator (URL) length of 2,083 characters. Internet Explorer also has a maximum path length of 2,048 characters. 

This limit applies to both POST request and GET request URLs. 




DFP is a google platform to sell Ads directly to individual advertisers.
Media.net is a Yahoo! contextual ad network.
So they are different platforms. They both have different purposes. DFP is managed by google and it is not connected in any way with Yahoo! Bing Network Contextual Ads.
For google DFP call 'https://securepubads.g.doubleclick.net/gampad', it needs to pass query string indicating where to send the bidding; in this case, mnet-query-parameters to point to media.net contextual ad network.



///////////////////////////////////////////////////////


Here is my observation:


(A) Status:

(A.1) in desktop version, e.g.: http://www.perf.webmd.com, there is a header-bidding call includes dfpDiv params:
http://qsearch.media.net/log?logid=adlog?dfpDiv[]=ads2-pos-101-ad_banner&actltime[]=221&dfpPos[]=101...

(A.2) in mobile version, e.g.: http://www.perf.m.webmd.com/a-to-z-guides/preemie-care-15/premature-first-days, there is no http://qsearch.media.net/log?=logid=adlog, so no dfpDiv, dfpPos...


(B) Reason:

(B.1) In desktop version, the media.net header-bidding params are passed into 'prev_scp', like this:

prev_scp:prev_scp:pos=101&mnetDNB=1&mnetPageID=0|pos=121&mnetDNB=1&mnetPageID=0

so DFP calls knows there is a header-bdding call, then fire http://qsearch.media.net/log?logid=adlog?dfpDiv[]...

(B.2) In mobile version, there is now media.net header-bdding params are passed to 'prev_scp', like this:

prev_scp:pos=1901|pos=2026

Without 'mnet' parameters, DFP calls doesn't know how to assembly the query-string, and fire the call:
"auctionDecisionPath": "http:\/\/qsearch.media.net\/log?logid=adlog",

So not fire http://qsearch.media.net/log?logid=adlog?dfpDiv[]...


(C) conclusion:

I am afraid mobile pages need to setup media.net header-bidding, include fowllowings:

Parameters:
CPM:"mnetbidPrice",
BIDDER_TYPE:"mnetbidderID",
CREATIVE_ID:"mnetCrid",
PLACEMENT_ID:"mnet_placement",
DFP_SIZE:"mnetSize"
PAGE_ID:"mnetPageID",
CUSTOMER_ID:"mnetCID",
BIDDER_ID:"mnetbidID",
NO_BID:"mnetDNB",
WINNER:"mnetDW"


Please add header-bidding stuff for mobile pages. Any issues let me know.



https://securepubads.g.doubleclick.net/gampad/ads?gdfp_req=1&correlator=416…79&vrp=79&ga_vid=1750676695.1458051962&ga_sid=1458051962&ga_hid=1700286765



