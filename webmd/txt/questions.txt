////// https://marketing.adobe.com/resources/help/en_US/sc/appmeasurement/hbvideo/c_rel_notes.html

The new tracking server is specific to each customer and should look like this: <Customer Analytics Visitor Namespace>.hb.omtrdc.net (the previous version was heartbeats.omtrdc.net). More details can be provided by your Adobe consultant.

webmd.hb.omtrdc.net


///// https://my.omniture.com/login/

In the visitor api code there is an MCORG ID. What is the ID?

16AD4362526701720A490D45@AdobeOrg


///////////////////////////////////


In perf.webmd.com homepage, we have:

<script class="googleloaded”>
……
var gads, node, useSSL;

// Asynchronously load the google code
gads = document.createElement("script");
gads.async = true;
gads.type = "text/javascript";
useSSL = "https:" === document.location.protocol;
gads.src = (useSSL ? "https:" : "http:") + "//www.googletagservices.com/tag/js/gpt.js";
node = document.getElementsByTagName("script")[0];
node.parentNode.insertBefore(gads, node);
……
</script>


And the purpose of this is to put gpt.js at the top of other scripts download.
I am curious how about we use other solutions to make it simpler and easily:

(1) directly put the following as the 1st script:

<script src=“http://www.googletagservices.com/tag/js/gpt.js”>< /script> 

This way is the same as the previous, and easier to use.


(2) gpt.js is total 3286 bytes. We just download and put in webmd.ads2.js file:
So the scripts/webmd.ads2.js like this:

//gpt.js first:
(function(){ gpt-stuff; })()

// webmd.ads2 stuff…
googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
webmd.ads2 = {…}

This way we don’t need to make an extra-ajax-call for gpt.js, save performance and faster.