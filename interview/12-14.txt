
function bind(fn, thisArg) {
	return function() {
		fn.apply(thisArg, arguments);
	}
}

function RR(words) {
	var len = words.length;
	var nw = words[len-1];

	return function RW() {
		if(len>0) {
			len = len - 1;
			if(len>0)
				nw += words[len-1];
			return RW();
		}
		return nw;
	}
}

RR('hello')();

////////////////////



var seconds, minutes, hours, divider, currentTimeString;
seconds = minutes = hours = currentTimeString = 0;
divider = 10;
var timer = setInterval(function() {

	seconds ++;
	minutes += Math.floor(seconds / divider);
  	hours += Math.floor(minutes / divider);
  	if(seconds % divider === 0) {
  		seconds = 0;
  	}
  	if(minutes % divider ===0) {
  		minutes = 0;
  	}

  	currentTimeString = [
  		hours ? (hours+":") : '', 
  		minutes ? (minutes+":") : '', 
  		seconds
  	].join('');
  
  	console.log(currentTimeString);
	// $(".clock").html(currentTimeString);

}, 1000);


/////////////////////////
function isString(x) {
  return Object.prototype.toString.call(x) === "[object String]"
}


var s = 'String';
var a = [1,2,3];
var o = {key: 'val'};

(s.constructor === String) && console.log('its a string');
(a.constructor === Array) && console.log('its an array');
(o.constructor === Object) && console.log('its an object');
(o.constructor === Number || s.constructor === Boolean) && console.log('this won\'t run');

If you use throw together with try and catch, you can control program flow and generate custom error messages.


