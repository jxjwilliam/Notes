import State from 'ampersand-state';
import Collection  from 'ampersand-collection';
import GenericModel from '../genericModel';


export const TimeInterval = State.extend({
    props: {
        start: {
            type: 'date',
            required: true
        },
        end: {
            type: 'date',
            required: false
        },
        status: {
            type: 'string',
            required: true
        }
    }
});


export const TimeIntervalCollection = Collection.extend({
    model: TimeInterval
});


export const UserStateModel = GenericModel.extend({
    config: {
        type: 'userState',
        version: '0.1.1',
        secondaryKeys: ['userId']
    },
    props: {
        userId: {
            type: 'string',
            required: true
        },
        status: {
            type: 'string',
            required: true,
            default: 'offline'
        }
    },
    collections: {
        timeIntervals: TimeIntervalCollection
    }
});

export default UserStateModel;


user::220b47b3-bbb8-42df-875a-15aa85d23975 
available 
environment::d2f85432-9b51-426a-90c4-6e61720bf645


user::33d3c440-2eb0-4c00-846d-8eaf33cb39ba available environment::5cb7e6fe-f546-416f-af90-ddeff82263e9


-- select meta().id from state
-- select *  from state order by createDate desc

const ERs = 'src/models/userState';
gulp.task('export-test', () => {
    return gulp.src([ERs + '/*.js', ERs + '/*.json', ERs + '/spec/*.spec.js'])
        .pipe(mocha({
            compilers: babel
        }));
});

gulp.task('export-test-watch', () => {
    gulp.watch([ERs + '/*.js', ERs + '/*.json', ERs + '/spec/*.spec.js'], ['export-test']);
});

const DestER = 'dist/data/exportReports';
gulp.task('exports-setup', () => {
    return gulp.src(ERs+'/reports', ERs+'/*')
        .pipe(babel())
        .pipe(gulp.dest(DestER))
});
