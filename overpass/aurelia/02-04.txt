One big difference I see here is that activate method has a Promis as return value so you can run here async code. Triggering async code in constructor is a very bad idea. Further detail is that constructor must not throw an exception so typically here you just assign constructor parameters to local variables without any logic. I would not do more stuff in constructor and the actual viewmodel initialization with logic should happen in activate or attached method.

1. Try to use ES6 array 
2. $ jspm install lodash
   $ jspm install npm:lodash.map
3. import map from 'lodash/map';
let result = map(...)



// http://stackoverflow.com/questions/28419242/property-change-subscription-with-aurelia
propertyObserver observes a specific property (eg firstName) and notifies you when the property changes. expressionObserver observes an entire expression (eg foo.bar[x][baz].hello() * test / something) and notifies you when the result of the expression changes. 

// git --track
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'

git branch -vv


///////////////////////////////////////////

this.agents.forEach(x => {
	if(x.status === '' && x.isActive) {
		x.status = 'Available';
	}
	else if(/unknown/i.test(x.status)) {
		x.isActive = false;
		x.status = 'Offline';
	}
});


{
"userId": "user::56354979-7de5-4318-bdc0-c7f310c618a3",
"isActive": true,
"fullName": "john smith",
"email": "johnsmiths657567657@mailinator.com",
"phoneNo": "",
"status": "unknown",
"calls": 46,
"options": {
  "Connection Lost": 26,
  "call-back": 19
},
"inReviewTime": 0,
"onCallTime": 0,
"wrapUpTime": 0,


		'In Review': 'inReviewTime',
		'On Call': 'onCallTime',
		'Wrap Up': 'wrapUpTime',
		'In Wrap Up': 'wrapUpTime'

}