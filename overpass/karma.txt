So, if you were to choose a test framework setup today, what might it look like?

If you go with Jasmine, you will likely use:

- Karma (for the test runner)
- Sinon (possibly for its fake server unless your framework provides an equivalent, like $httpBackend if you are using Angular)


If you go with Mocha, you will likely use:

- Chai (for assertions)
- Sinon (for test doubles and its fake server)
- Karma or mocha CLI (for the test runner)

karma + jasmine : mocha + chai

## karma + es6
http://www.syntaxsuccess.com/viewarticle/writing-jasmine-unit-tests-in-es6


gulp --tasks

////////////


/**
 * input: "outcomes": [
 *    "busy",
 *    "sale closed",
 *    "sale closed"
 *  ]
 *  output: {'sale closed': 2, busy: 1 }
 *  TODO: should update in chaim: userCredentialsCrud.server.js, outcomes???
 */
processOutcomes(outcomes) {
	let obj = {};
	if(outcomes && Array.isArray(outcomes)) {
		outcomes.forEach((x, i) => {
			let propName = x;
			if(obj.hasOwnProperty(propName)){
				obj[propName] += 1;
			} else {
				obj[propName] = 1;
			}
		});
	}
	return obj;
}

addAgentAttribute() {
	// what else agent attributes need to be added?
	this.agents.forEach(x => {
		x.profileImage = x.profileImage ||  '/node_modules/overpass-cdn/assets/icons/avatar.png';
		//x.options = x.processOutcomes(x.options);
		x.outcome = x.outcome || x.options.disconnected;
	});
}


Available
Inreview
Oncall
Wrapup
Inwrapup