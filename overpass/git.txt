
git log --follow -p -- package.json
git log --follow --all -p package.json
git log --pretty=short -u -L package.json
git log -p


-v, -vv, --verbose
           When in list mode, show sha1 and commit subject line for each head, along with
           relationship to upstream branch (if any). If given twice, print the name of the
           upstream branch, as well (see also git remote show <remote>).
git branch -vv


gitk --follow --all -p package.json

tree .git
ls -a
git add -p [file_name]

git rebase -i HEAD~[number_of_commits]


============
Who Messed With My Code?

It’s the natural instinct of human beings to blame others when something goes wrong. If your production server is broke, it’s very easy to find out the culprit — just do a git blame. This command shows you the author of every line in a file, the commit that saw the last change in that line, and the timestamp of the commit.

git blame [file_name]


git stash
git stash list
git stash apply
git stash pop
git stash clear

git diff --stat
git log --stat


https://www.alexkras.com/19-git-tips-for-everyday-use/

Log actual changes in a file
git log -p filename

Extract a file from another branch
git show some-branch:some-file.js

12. Ignore the white space
Sample git diff -w or git blame -w




Pick a commit from another branch
It’s sometimes useful to pick a commit from another branch to add it in the current branch.

git cherry-pick [commit_hash]


Revisions:
Most Git commands expect some kind of revision. Usually you pass in a branch name or a SHA1 of a specific commit, but Git revisions are much more powerful than that.

First, there is a special revision called head (also known as HEAD). head is whatever point your working directory currently is at, usually the tip of a branch.

Second, you can easily reach older commits given a starting ref without having to know their SHA1. Let’s say you want to specify the commit that came before the current one (also called “parent”): Simply type head^. The great-grandfather? head^^^. However, the farther back you go in history, the more cumbersome it gets. So Git also offers an alternate syntax for this: The great-grandfather can also be specified using head~3.

Want to reach the commit whose commit message matches a certain string? Use :/really awesome commit to find that really awesome commit.

branch@{yesterday} will give you the revision that branch was at yesterday, branch@{2 days 3 hours 4 seconds ago} is the branch, well, 2 days, 3 hours and 4 seconds ago.

I’ve only scratched the surface of what’s possible, so make sure you read the man page.


///////////////////////////////
Object.prototype.toString.call(obj) == "[object Object]" && Object.keys(obj).length>0