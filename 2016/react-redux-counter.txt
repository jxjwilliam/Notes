class CounterStore extends React.Component {
    render() {
        return (
            <div className="container-fluid">
                <Counter
                    value={store.getState()}
                    onIncrement={() => store.dispatch({ type: 'INCREMENT' })}
                    onDecrement={() => store.dispatch({ type: 'DECREMENT' })}
                    />
            </div>
        )
    }
}



export default class CounterStore extends React.Component {
    constructor(props) {
        super(props)
        this.state = {value: 0}
    }

    increment() {
        this.setState({value: this.state.value + 1 });
        console.info('increment');
    }

    decrement() {
        this.setState({value: this.state.value - 1 });
        console.info('decrement');
    }

    render() {
        return (
            <div className="container-fluid">
                <Counter
                    value={this.state.value}
                    onIncrement={this.increment.bind(this)}
                    onDecrement={this.decrement.bind(this)}
                    ></Counter>
            </div>
        )
    }
}



//to actually initiate a dispatch, pass the result to the dispatch() function:
dispatch(addPhone(phone));
dispatch(deletePhone(phone));
dispatch(increment(step));
dispatch(decrement(step));

$r
$r.store
$r.store.getState()


    constructor(props) {
        super(props)
        this.state = {value: 10}
    }

    componentDidMount() {
        //let { dispatch } = this.props;
        //
        //let action = actionCreator.incrementCounter();
        //
        //dispatch(action)
    }




import React, { Component } from 'react';
import { bindActionCreators } from 'redux'
import { connect } from 'react-redux'

import Counter from '../components/Counter.js';

import * as actionCreator from '../actions/actionCreator.js'

class CounterContainer extends Component {
    constructor(props) {
        super(props)
        this.state = {value: 10}
    }
    
    render() {
        return (
            <div className="container-fluid">
                <Counter
                    value={this.props.value}
                    onIncrement={() => dispatch(actionCreator.incrementCounter())}
                    onDecrement={() => dispatch(actionCreator.decrementCounter())}
                    ></Counter>
            </div>
        )
    }
}

function mapStateToProps(state) {
    return {
        value: state.value
    }
}

function mapDispatchToProps(dispatch) {
    return bindActionCreators(actionCreator, dispatch);
}

export default connect(mapStateToProps, mapDispatchToProps)(CounterContainer);
//export default connect(state=>({value: state.value}))(CounterContainer);
