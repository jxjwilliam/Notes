
TO be able to integrate redux with asynchronos actions (AJAX), you need a library to help. The most popular 2 are redux-thunk and redux-saga.


///////////////////////////////

I call components encapsulated React components that are driven solely by props and don't talk to Redux. Same as “dumb components”. They should stay the same regardless of your router, data fetching library, etc.

I call containers React components that are aware of Redux, Router, etc. They are more coupled to the app. Same as “smart components”.


 it’s totally fine to use container components inside presentational components. The reason for this is simple: you want to be able to turn a presentational component into a container component at any time it needs too much information, and it would be a bummer if you had to convert all call sites when you do that. Therefore whether a component is presentational or a container is its implementation detail, and any components, whether presentational or containers, can use it just fine.


redux-saga, redux-thunk

applyMiddleward(ReduxPromise, thunk)(createStore);

const store = createStore(reducer, applyMiddleward([ReduxPromise, thunk]));


///////////////////////////////////////////
------ react-router-redux source code:

import React, {PropTypes} from 'react'
import ReactDOM from 'react-dom'
import { createStore, combineReducers, applyMiddleware, bindActionCreators, compose } from 'redux'
import { Provider, connect } from 'react-redux'
import { Router, Route, browserHistory } from 'react-router'
import { syncHistoryWithStore, routerReducer } from 'react-router-redux'

import thunk from 'redux-thunk'
import reducers from '<project-path>/reducers'

// Add the reducer to your store on the `routing` key
const store = createStore(
  combineReducers({
    ...reducers,
    routing: routerReducer
  })
)

// Create an enhanced history that syncs navigation events with the store
const history = syncHistoryWithStore(browserHistory, store)

ReactDOM.render(
  <Provider store={store}>
    { /* Tell the Router to use our enhanced history */ }
    <Router history={history}>
      <Route path="/" component={App}>
        <Route path="foo" component={Foo}/>
        <Route path="bar" component={Bar}/>
      </Route>
    </Router>
  </Provider>,
  document.getElementById('mount')
)

const finalCreateStore = compose(
  applyMiddleware(
    middleware,
    thunk
  ),
  DevTools.instrument()
)(createStore);
const store = finalCreateStore(reducer)


///////////////////////////////

const persistedState = localStorage.getItem('reduxState') ? JSON.parse(localStorage.getItem('reduxState')) : {}

const store = createStore(
  reducer, 
  persistedState,
  /* any middleware... */
);

const store = createStore(reducer, persistedState);
store.subscribe(() => {
  // persist your state
  // localStorage
  localStorage.setItem(''reduxState', JSON.stringify(store.getState()));
});


To make it clear: the state computed from reducers to drive React renderings should absolutly stay pure! But not all state of your app has the purpose of triggering renderings, and this is the case here where the need is to synchronise different decoupled parts of your app with complex rules. The state of this "saga" should not trigger a React rendering!



Delete 
items: [
  ...state.items.slice(0, action.payload),
  ...state.items.slice(action.payload+1)
]


function fetchPosts (subreddit) {
  return dispatch => {
    dispatch(requestPoss(subreddit))

    return fetch(`http://www.reddit.com/r/${subreddit}.json`)
    .then(response => response.json())
    .then(json => dispatch(receivePost(subreddit, json)))
  }
}



class AsyncApp extends Component {
  constructor(props) {
    super(props)
  }
  componentDidMount() {
    const { dispatch, selectedSubreddit } = this.props
    dispatch(fetchPostsIfNeeded(selectedSubreddit))
  }

  componentWillReceiveProps(nextProps) {

  }

  handleRefreshClick(e) {
    e.preventDefault()
    dispatch(invalidateSubreddit(selectedSubreddit))
    dispatch(fetchPostsIfNeeded(selectedSubreddit))
  }

  render() {
    const {}
  }
}


在Redux世界里，人们经常使用中间件来处理这些操作。所有action在你发起后，和到达reducer前，都必须穿过中间件。现在已经有很多中间件使用回调和Promise来做这些事了（指那些复杂的异步操作）。


我们在action中进行http请求和服务端交互，即便是在中间件中执行http请求，其实质也是dispatch的封装。


Database <-> Action -> Reducer -> state -> Components -> 
                |                                      |
                |                                      |
                 <------------------------------------ |
action操作数据库后，要在回调中返回信号，让reducer更新state，因为只有state变了，组件才会变。state变了，组件自动就变了，至少不用苦逼地操作dom了，还是挺开心的！

组件 (Components) 和Redux容器 (Containers) 的耦合度很低，我们可以完全将它们隔离开来编写，通过一些固定的套路将它们连接起来。什么套路？

- 绑定state到props
- 绑定action到props（可选）
- 将store注入，并用provider在顶层包住组件 (connect)

Redux是个状态容器，只能通过发起action改变state，这种集中管控的做法让状态管理和预测变的简单。组件只是state的展现形式而已！React只是一个界面库而已！


Redux中间一共嵌套了三层函数，分别传递了store、next、action这三个参数。

export default store => next => action => {}

- next, 因为中间件是要多个首尾相连的，对next进行一层层的”加工”，所以next必须独立一层。
- store，我们要在中间件顶层放上store，因为我们要用store的dispatch和getState两个方法。
- action，因为我们封装了这么多层，其实就是为了作出更高级的dispatch方法，但是在高级也是dispatch; 是dispatch就得接受action这个参数。

